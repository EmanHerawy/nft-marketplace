{
  "address": "0x5171e2d76B3D114e06712320D5c1534cB0107455",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_marketPlaceName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_paymentContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adminWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usdCap_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stfiCap_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stfiUsdt_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BidOnAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyNow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBase",
          "type": "uint256"
        }
      ],
      "name": "ChangeFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "ChangeFulfillDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBase",
          "type": "uint256"
        }
      ],
      "name": "ChangeListInsuranceAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "Name",
          "type": "string"
        }
      ],
      "name": "ChangeMarketPlaceName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "reputationContract",
          "type": "address"
        }
      ],
      "name": "ChangeReputationContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "utiltiyToken",
          "type": "address"
        }
      ],
      "name": "ChangeUtilityToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumBid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CreateAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DeListOffMarketplace",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finefees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DisputeAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FulfillBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "HandelKyc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ListOnMarketplace",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MigrateEmergency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeBase",
          "type": "uint256"
        }
      ],
      "name": "NewOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "UpdateAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastReserves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserReservesRelease",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_FEEDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeBase",
          "type": "uint256"
        }
      ],
      "name": "addOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "approveDeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "buyNow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "buyNowWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donomirator",
          "type": "uint256"
        }
      ],
      "name": "changeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "changeFulfillDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donomirator",
          "type": "uint256"
        }
      ],
      "name": "changeListInsuranceAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "changeMarketPlaceName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "changeUtilityToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "insuranceAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSellForEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "insuranceAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSellForEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "createAuctionWithPermit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "deList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "disputeAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "fulfillBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "fulfillBidWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fulfillDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "getAuctionBidDetails",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isStakeReserved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "getListingDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disputeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "insuranceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_base",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getServiceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getStakeAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "isApprovedDeal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        }
      ],
      "name": "listOnMarketplace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "listOnMarketplaceWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listqualifyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listqualifyPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPlaceName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "migrateEmergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "listingIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "releaseBatchReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "releaseListingReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stfiPrice",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdCap_",
          "type": "uint256"
        }
      ],
      "name": "setUsdCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stfiCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stfiUsdt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "updateAdminWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "winnerBid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isStakeReserved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf23e46b3f4af6484f44bbd7199ecc2038884203ed39b48118ae366105efc322",
  "receipt": {
    "to": null,
    "from": "0x5B38Da6a701c568545dCfcB03FcB875f56beddC4",
    "contractAddress": "0x5171e2d76B3D114e06712320D5c1534cB0107455",
    "transactionIndex": 8,
    "gasUsed": "5788559",
    "logsBloom": "0x
    "blockHash": "0xad5d01bf23b54671637cdd1156bf5ec9be118a56146a50c5ccd3a68ceedc7d35",
    "transactionHash": "0xaf23e46b3f4af6484f44bbd7199ecc2038884203ed39b48118ae366105efc322",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 9836389,
        "transactionHash": "0xaf23e46b3f4af6484f44bbd7199ecc2038884203ed39b48118ae366105efc322",
        "address": "0x5171e2d76B3D114e06712320D5c1534cB0107455",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xad5d01bf23b54671637cdd1156bf5ec9be118a56146a50c5ccd3a68ceedc7d35"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 9836389,
        "transactionHash": "0xaf23e46b3f4af6484f44bbd7199ecc2038884203ed39b48118ae366105efc322",
        "address": "0x5171e2d76B3D114e06712320D5c1534cB0107455",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xad5d01bf23b54671637cdd1156bf5ec9be118a56146a50c5ccd3a68ceedc7d35"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 9836389,
        "transactionHash": "0xaf23e46b3f4af6484f44bbd7199ecc2038884203ed39b48118ae366105efc322",
        "address": "0x5171e2d76B3D114e06712320D5c1534cB0107455",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f7",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xad5d01bf23b54671637cdd1156bf5ec9be118a56146a50c5ccd3a68ceedc7d35"
      }
    ],
    "blockNumber": 9836389,
    "cumulativeGasUsed": "7649195",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "StartFi Market",
    "0xD70cc1336ecf0B8FaD791e010CA6aC5F82980A38",
    "0xDA9d107dEa05318194100B8780b03EbDcC5D1E78",
    "0x5B38Da6a701c568545dCfcB03FcB875f56beddC4",
    "20000000000000000000000",
    "200000000000000000000000",
    "10000000000000000000"
  ],
  "solcInputHash": "b4ee5648d0e9d9b46f5b1ab4eac42396",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketPlaceName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_paymentContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdCap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stfiCap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stfiUsdt_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidOnAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyNow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBase\",\"type\":\"uint256\"}],\"name\":\"ChangeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ChangeFulfillDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBase\",\"type\":\"uint256\"}],\"name\":\"ChangeListInsuranceAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"}],\"name\":\"ChangeMarketPlaceName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reputationContract\",\"type\":\"address\"}],\"name\":\"ChangeReputationContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"utiltiyToken\",\"type\":\"address\"}],\"name\":\"ChangeUtilityToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DeListOffMarketplace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finefees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisputeAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FulfillBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"HandelKyc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ListOnMarketplace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MigrateEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeBase\",\"type\":\"uint256\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdateAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserReservesRelease\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_FEEDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"}],\"name\":\"addOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"approveDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyNowWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donomirator\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"changeFulfillDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donomirator\",\"type\":\"uint256\"}],\"name\":\"changeListInsuranceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeMarketPlaceName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeUtilityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSellForEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSellForEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"createAuctionWithPermit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"deList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"disputeAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"fulfillBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"fulfillBidWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fulfillDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getAuctionBidDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStakeReserved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"getListingDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakeAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"isApprovedDeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"}],\"name\":\"listOnMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"listOnMarketplaceWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listqualifyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listqualifyPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlaceName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"migrateEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"listingIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"releaseBatchReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"releaseListingReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stfiPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdCap_\",\"type\":\"uint256\"}],\"name\":\"setUsdCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stfiCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stfiUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"winnerBid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStakeReserved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addOffer(address,uint256,uint256)\":{\"details\":\"only called by `owner` to change the name and `whenPaused`\",\"params\":{\"_fee\":\"marketplace reputation contract\",\"feeBase\":\"marketplace reputation contract\",\"wallet\":\"marketplace reputation contract\"}},\"approveDeal(bytes32,bool)\":{\"details\":\"only called by `owner` to approve listing that exceeded cap after doing the KYC\",\"params\":{\"listingId\":\"listing Id\",\"status\":\"kyc status emit HandelKyc\"}},\"bid(bytes32,uint256)\":{\"details\":\"called by dapps to bid on an auction\",\"params\":{\"bidPrice\":\"price emit : BidOnAuction\",\"listingId\":\"listing id\"}},\"buyNow(bytes32)\":{\"details\":\"called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace\",\"params\":{\"listingId\":\"listing id emit : BuyNow\"}},\"changeFees(uint256,uint256)\":{\"details\":\"the formula is (fees * 1000)/base\",\"params\":{\"donomirator\":\"the new basefees value to be stored\",\"numerator\":\"the new fees value to be stored\"},\"returns\":{\"percentage\":\"the value of the state variable `_feeFraction`\"}},\"changeListInsuranceAmount(uint256,uint256)\":{\"details\":\"the formula is (fees * 1000)/base\",\"params\":{\"donomirator\":\"the new basefees value to be stored\",\"numerator\":\"the new fees value to be stored\"},\"returns\":{\"percentage\":\"the value of the state variable `_feeFraction`\"}},\"changeMarketPlaceName(string)\":{\"details\":\"only called by `owner` to change the name and `whenPaused`\",\"params\":{\"_name\":\"marketplace new name\"}},\"changeUtilityToken(address)\":{\"details\":\"only called by `owner` to change the name and `whenPaused`\",\"params\":{\"_token\":\"token address\"}},\"createAuction(address,uint256,uint256,uint256,bool,uint256,uint256)\":{\"details\":\"called by dapps to create  new auction\",\"params\":{\"duration\":\"when auction ends\",\"insuranceAmount\":\"amount of token locked as qualify for any bidder wants bid\",\"isSellForEnabled\":\"true if auction enable direct selling\",\"listingPrice\":\"price  to sell with if isSellForEnabled=true\",\"minimumBid\":\"minimum Bid price\",\"token\":\"nft contract address\",\"tokenId\":\"token id\"},\"returns\":{\"listId\":\"listing id**  Users who want to list their NFT as auction for bidding with/without allowing direct sale. - user MUST approve contract to transfer the NFT      - Time to live auction duration must be more than 12 hours. - if `sellForEnabled` is true, `sellFor` value must be more than zero - auction creator MUST specify the insurance amounts for any bidder to bid with considering that it MUST NOT be less that 1 USDT value in STFI. **  emit : CreateAuction\"}},\"createAuctionWithPermit(address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"called by dapps to create  new auction\",\"params\":{\"deadline\":\":  must be timestamp in future .\",\"duration\":\"when auction ends\",\"insuranceAmount\":\"amount of token locked as qualify for any bidder wants bid\",\"isSellForEnabled\":\"true if auction enable direct selling\",\"listingPrice\":\"min price\",\"minimumBid\":\"price  to sell with if isSellForEnabled=true\",\"r\":\": normal output of an ECDSA signature\",\"s\":\": normal output of an ECDSA signature `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.\",\"token\":\"nft contract address\",\"tokenId\":\"token id\",\"v\":\"needed to recover the public key\"},\"returns\":{\"listId\":\"listing id**  Users who want to list their NFT as auction for bidding with/without allowing direct sale call this function without sending prior transaction to `approve` the marketplace to transfer NFT. This function call`permit` [`eip-2612`] then call [`createAuction`] internally.**\"}},\"deList(bytes32)\":{\"details\":\"called by seller through dapps when s/he wants to remove this token from the marketplace\",\"params\":{\"listingId\":\"listing id emit DeListOffMarketplace\"}},\"disputeAuction(bytes32)\":{\"details\":\"called by seller through dapps when his/her auction is  not fulfilled after 3 days\",\"params\":{\"listingId\":\"listing id\"},\"returns\":{\"_token\":\"nft contract address\",\"tokenId\":\"token id emit : DisputeAuction\"}},\"fulfillBid(bytes32)\":{\"details\":\"called by bidder through dapps when bidder win an auction and wants to pay to get the NFT\",\"params\":{\"listingId\":\"listing id\"}},\"fulfillBidWithPermit(bytes32,uint256,uint8,bytes32,bytes32)\":{\"details\":\"called by bidder through dapps when bidder win an auction and wants to pay to get the NFT\",\"params\":{\"deadline\":\":  must be timestamp in future .\",\"listingId\":\"listing id\",\"r\":\": normal output of an ECDSA signature\",\"s\":\": normal output of an ECDSA signature `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.\",\"v\":\"needed to recover the public key\"}},\"getAuctionBidDetails(bytes32,address)\":{\"details\":\"called by dapp or any contract to get info about a given bidder in a listing\",\"params\":{\"bidder\":\"bidder address\",\"listingId\":\"listing id\"},\"returns\":{\"bidId\":\"bid id\",\"bidPrice\":\"bid price\",\"isPurchased\":\"true if purchased\",\"isStakeReserved\":\"true if the reserve is free\"}},\"getListingDetails(bytes32)\":{\"details\":\"called by dapp or any contract to get info about a gevin listing\",\"params\":{\"listingId\":\"listing id\"},\"returns\":{\"buyer\":\" nft buyer address\",\"disputeTime\":\" when auction creator can dispute and take the insurance from the bad actor 'bidWinner'\",\"insuranceAmount\":\" amount of token locked as qualify for any bidder wants bid\",\"listingPrice\":\"initial price or minimum price that the seller can accept\",\"listingType\":\"in number { Auction,FixedPrice,AuctionForSale}\",\"minimumBid\":\"if sell for enabled for auction, this should be more than zero\",\"releaseTime\":\" when auction ends\",\"seller\":\" nft seller address\",\"status\":\"in number {Sold,OnMarket, onAuction,Canceled}\",\"tokenAddress\":\" nft contract address\",\"tokenId\":\"NFT token Id\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getServiceFee()\":{\"returns\":{\"_0\":\"the value of the state variable `_feeFraction`\"}},\"getStakeAllowance(address)\":{\"details\":\"this function calls StartFiStakes contract to get the total staked tokens for 'user' an substract the current reserves to get the total number of free tokens\",\"params\":{\"staker\":\": participant address\"},\"returns\":{\"_0\":\"allowed number of tokens that this contract can transfer from the owner account\"}},\"getUserReserved(address)\":{\"details\":\"called by the dapp to get the user stakes on hold\",\"params\":{\"user\":\": participant address\"},\"returns\":{\"_0\":\"the value of user reserves\"}},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"listOnMarketplace(address,uint256,uint256)\":{\"details\":\"called by dapps to list new item\",\"params\":{\"listingPrice\":\"min price** Users who want to list their NFT for sale with fixed price call this function  - user MUST approve contract to transfer the NFT      - user MUST have enough stakes used as insurance to not delist the item before the duration stated in the smart contract , if they decided to delist before that time, they lose this insurance. the required insurance amount is a percentage  based on the listing price.**  emit : ListOnMarketplace\",\"token\":\"nft contract address\",\"tokenId\":\"token id\"}},\"listOnMarketplaceWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"called by dapps to list new item\",\"params\":{\"deadline\":\":  must be timestamp in future .\",\"listingPrice\":\"min price\",\"r\":\": normal output of an ECDSA signature\",\"s\":\": normal output of an ECDSA signature `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.** Users who want to list their NFT for sale with fixed price call this function without sending prior transaction to `approve` the marketplace to transfer NFT. This function call`permit` [`eip-2612`] then call [`listOnMarketplace`] internally**\",\"token\":\"nft contract address\",\"tokenId\":\"token id\",\"v\":\"needed to recover the public key\"}},\"marketPlaceName()\":{\"returns\":{\"_0\":\"market place name\"}},\"migrateEmergency(bytes32)\":{\"details\":\"called by seller through dapps when s/he wants to remove this token from the marketplace\",\"params\":{\"listingId\":\"listing id emit : MigrateEmergency\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"pause()\":{\"details\":\"Pauses contract. Requirements: - the caller must be the owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"releaseListingReserves(bytes32,address)\":{\"details\":\"called by user through dapps when his/her wants to release his reserved tokens which are no longer in active auction .\",\"params\":{\"bidder\":\"bidder address emit : UserReservesRelease\",\"listingId\":\"listing idbehalf\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"setPrice(uint256)\":{\"details\":\"only called by  `priceFeeds` to update the STFI/usdt price\",\"params\":{\"_stfiPrice\":\"the new stfi price per usdt\"}},\"setUsdCap(uint256)\":{\"details\":\"only called by `owner` to update the cap\",\"params\":{\"usdCap_\":\"the new fees value to be stored\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpauses contract. Requirements: - the caller must be the owner.\"},\"updateAdminWallet(address)\":{\"details\":\"update the admin wallet address. Requirements: - the caller must be the admin. - the `newWallet` must not be empty.\"},\"winnerBid(bytes32)\":{\"details\":\"called by dapp or any contract to get info about a winner bid\",\"params\":{\"listingId\":\"listing id\"},\"returns\":{\"bidId\":\"bid id\",\"bidPrice\":\"bid price\",\"bidder\":\"bidder address\",\"isPurchased\":\"true if purchased\",\"isStakeReserved\":\"true if the reserve is free\"}}},\"title\":\"StartFi MarketPlace desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveDeal(bytes32,bool)\":{\"notice\":\"STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and any purchase transaction with price exceed the cap can't be proceed unless this deal is approved by Startfi by calling this function - called only by account in owner role\"},\"bid(bytes32,uint256)\":{\"notice\":\"** Users who interested in a certain auction, can bid on it by calling this   function.Bidder don't pay / transfer SFTI on bidding. Only when win the auction [`the auction is ended and this bidder is the last one to bid`], bidder pays by calling [`fulfillBid`] OR [`buyNowWithPermit`] - user MUST have enough stakes used as insurance; grantee and punishment mechanism for malicious bidder. If the bidder don't pay in the   - Bidders can bid as much as they wants , insurance is taken once in the first participation  - the bid price MUST be more than the last bid , if this is the first bid, the bid price MUST be more than or equal the minimum bid the auction creator state - Users CAN NOT bid on auction after auction time is over**\"},\"buyNow(bytes32)\":{\"notice\":\"**  Users who want to buy an NFT from the marketplace whether it's fixed price or auction with `sellForEnabled = true` can call this function. - User MUST approve contract to transfer the STFI token , MUST NOT be less than the price. - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`]**if auction, the seller must enabe forSale. prices should be more than or equal the listing price\"},\"changeFees(uint256,uint256)\":{\"notice\":\"only called by `owner` to change the name and `whenPaused`\"},\"changeListInsuranceAmount(uint256,uint256)\":{\"notice\":\"only called by `owner` to change the name and `whenPaused`\"},\"deList(bytes32)\":{\"notice\":\"** Users who no longer want to keep their NFT in our marketplace can easly call this function to get their NFT back. Unsuccessful auction creators need to call it as well to get their nft back with no cost as well as the item added via [`listOnMarketplace`] or [`listOnMarketplaceWithPermit`]   - Only buyers can delist their own items  - Auction items can't delisted until the auction ended**auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine\"},\"disputeAuction(bytes32)\":{\"notice\":\"**  If the winning bidder didn't pay within the time range stated in te contract `fulfillDuration`, Auction creator calls this function to get the nft back and punish the malicious bidder by taking the insurance (50% goes to the auction staking balance, 50% goes to the platform) - Current time  MUST be more than or equal the `disputeTime` for this auction      - Only auction Creator can dispute. - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, and the auction is approved , auction creator can dispute, if it's not approved yet, auction creator can not. - [`buyNow`]: Users who want to buy an NFT from the marketplace whether it's fixed price or auction with `sellForEnabled = true` can call this function. - User MUST approve contract to transfer the STFI token , MUST NOT be less than the price. - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`]**after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner\"},\"fulfillBid(bytes32)\":{\"notice\":\"**  After the end of the Auction, the winner bidder , the last bidder call this function within a certain duration to pay and get the NFT - user MUST approve contract to transfer the STFI tokens , MUST NOT be less than the bid price      - Winner bidder can call it within the `fulfillDuration` right after the end of the auction. - Winner bider can call it even after the its end as long as the auction reactor has not called dispute. the winner bidder can have chat with the seller  and if the auction creator thinks the winner bidder is not a malicious bidder,  they might agree to wait so we don't want to prevent the scenario where the can see eye to eye. At the end the auction creator wants to buy the NFT and get the price - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`] ** emit : FulfillBid\"},\"fulfillBidWithPermit(bytes32,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"**After the end of the Auction, the winner bidder , the last bidder call this function within a certain duration to pay and get the NFT, they call this function without sending prior transaction to `approve` the marketplace to transfer STFI. This function call`permit` [`eip-2612`] then call [`fulfillBid`] internally.** \"},\"migrateEmergency(bytes32)\":{\"notice\":\"** Only when contract is paused, users can safely delist their token with no cost. Startfi team might have to pause the contract to make any update on the protocol terms or in emergency if high risk vulnerability is discovered to protect the users.     - Only buyers can delist their own items **called only when puased , let user to migrate for release if they don't agree on our new terms\"},\"releaseListingReserves(bytes32,address)\":{\"notice\":\"** users need to stake STFI to bid in the marketplace , these tokens needs to set release if the auction is no longer active and user can use these stakes to bid  thus, function to release tokens reserved to listing of market   in order to let user batch release many lisiting , they can call `releaseBatchReserves` called by user/ third actors only when s/he wants rather than force the check & updates with every transaction which might be very costly . -  ** called by user or on behalf of the user only when s/he wants rather than force the check & updates with every transaction which might be very costly .\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartFiMarketPlace.sol\":\"StartFiMarketPlace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/MarketPlaceBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport './StartFiMarketPlaceAdmin.sol';\\n\\n/**\\n \\n *@title  MarketPlace Base\\n * [ desc ] : contract to handle the main functions for any marketplace\\n */\\ncontract MarketPlaceBase is ERC721Holder, StartFiMarketPlaceAdmin {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    string private _marketPlaceName;\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    function _MarketplaceBase_init_unchained(string memory _name) internal {\\n        _marketPlaceName = _name;\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /**\\n     * @return market place name\\n     */\\n    function marketPlaceName() external view returns (string memory) {\\n        return _marketPlaceName;\\n    }\\n\\n    /******************************************* state functions go here ********************************************************* */\\n\\n    /**\\n     * @dev only called by `owner` to change the name and `whenPaused`\\n     *@param _name marketplace new name\\n     *\\n     */\\n    function changeMarketPlaceName(string memory _name) external onlyOwner whenPaused {\\n        _marketPlaceName = _name;\\n        emit ChangeMarketPlaceName(_name);\\n    }\\n}\\n\",\"keccak256\":\"0x60777ab8742c27ed6a2d9129547334c6ee1b87d17ef574104d42c50cb8132f1a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/MarketPlaceBid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\n/**\\n \\n *@title  MarketPlace Bid\\n * [ desc ] : contract handles all the bid related functions for marketplace\\n */\\ncontract MarketPlaceBid {\\n    struct Bid {\\n        bytes32 bidId;\\n        uint256 bidPrice;\\n        bool isPurchased;\\n        bool isStakeReserved; // ture till the bidder free\\n    }\\n    struct WinningBid {\\n        bytes32 bidId;\\n        address bidder;\\n    }\\n    // lisingId to bid key to bid details\\n    mapping(bytes32 => mapping(address => Bid)) internal listingBids;\\n    // track the bid latest bid id\\n    mapping(bytes32 => WinningBid) internal bidToListing;\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n    /**\\n     *\\n     * @dev   called by dapp or any contract to get info about a winner bid\\n     * @param listingId listing id\\n     * @return bidId bid id\\n     * @return bidder bidder address\\n \\n     * @return bidPrice bid price\\n     * @return isPurchased true if purchased\\n     * @return isStakeReserved true if the reserve is free\\n     */\\n    function winnerBid(bytes32 listingId)\\n        external\\n        view\\n        returns (\\n            bytes32 bidId,\\n            address bidder,\\n            uint256 bidPrice,\\n            bool isPurchased,\\n            bool isStakeReserved\\n        )\\n    {\\n        bidId = bidToListing[listingId].bidId;\\n        bidder = bidToListing[listingId].bidder;\\n        bidPrice = listingBids[listingId][bidder].bidPrice;\\n        isPurchased = listingBids[listingId][bidder].isPurchased;\\n        isStakeReserved = listingBids[listingId][bidder].isStakeReserved;\\n    }\\n\\n    /**\\n     *\\n     * @dev   called by dapp or any contract to get info about a given bidder in a listing\\n     * @param listingId listing id\\n     * @param bidder bidder address\\n     * @return bidId bid id\\n     * @return bidPrice bid price\\n     * @return isPurchased true if purchased\\n     * @return isStakeReserved true if the reserve is free\\n     */\\n    function getAuctionBidDetails(bytes32 listingId, address bidder)\\n        external\\n        view\\n        returns (\\n            bytes32 bidId,\\n            uint256 bidPrice,\\n            bool isPurchased,\\n            bool isStakeReserved\\n        )\\n    {\\n        bidId = listingBids[listingId][bidder].bidId;\\n        bidPrice = listingBids[listingId][bidder].bidPrice;\\n        isPurchased = listingBids[listingId][bidder].isPurchased;\\n        isStakeReserved = listingBids[listingId][bidder].isStakeReserved;\\n    }\\n\\n    /******************************************* change state functions go here ********************************************************* */\\n}\\n\",\"keccak256\":\"0xd529fb42e0e391b39c832d4e3aee7b6b61731a0b8c4f908ce9aefbb3ca0d20c9\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/MarketPlaceListing.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\n/**\\n *@title  MarketPlace Listing\\n * [ desc ] : contract handle all item list in marketplace related function\\n */\\ncontract MarketPlaceListing {\\n    // store every listed item here\\n    bytes32[] public listings;\\n\\n    constructor() {}\\n\\n    struct Listing {\\n        address token;\\n        address seller;\\n        address buyer;\\n        uint256 tokenId;\\n        uint256 listingPrice;\\n        // only if bed and sell for enabled\\n        uint256 releaseTime;\\n        uint256 disputeTime; // only in auction\\n        uint256 insuranceAmount; // if it is not auction, this represents the inusrance seller has to put, if auction , this represents the insurance bidder has to put\\n        uint256 minimumBid;\\n        ListingType listingType;\\n        ListingStatus status;\\n    }\\n    enum ListingType {\\n        Auction,\\n        FixedPrice,\\n        AuctionForSale\\n    }\\n    enum ListingStatus {\\n        Sold,\\n        OnMarket,\\n        Canceled\\n    }\\n    // listing key  to lisitng details\\n    mapping(bytes32 => Listing) internal _tokenListings;\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n    /**\\n    *\\n      * @dev   called by dapp or any contract to get info about a gevin listing\\n      * @param listingId listing id\\n\\n      * @return tokenAddress  nft contract address\\n           * @return seller  nft seller address\\n      * @return buyer  nft buyer address\\n      * @return tokenId NFT token Id\\n      * @return listingPrice initial price or minimum price that the seller can accept\\n  \\n      * @return releaseTime  when auction ends\\n      * @return disputeTime  when auction creator can dispute and take the insurance from the bad actor 'bidWinner'\\n      * @return insuranceAmount  amount of token locked as qualify for any bidder wants bid\\n      * @return minimumBid if sell for enabled for auction, this should be more than zero\\n      * @return listingType in number { Auction,FixedPrice,AuctionForSale}\\n      * @return status in number {Sold,OnMarket, onAuction,Canceled}\\n     */\\n    function getListingDetails(bytes32 listingId)\\n        external\\n        view\\n        returns (\\n            address tokenAddress,\\n            address seller,\\n            address buyer,\\n            uint256 tokenId,\\n            uint256 listingPrice,\\n            uint256 releaseTime,\\n            uint256 disputeTime,\\n            uint256 insuranceAmount,\\n            uint256 minimumBid,\\n            uint256 listingType,\\n            uint256 status\\n        )\\n    {\\n        tokenAddress = _tokenListings[listingId].token;\\n        seller = _tokenListings[listingId].seller;\\n        buyer = _tokenListings[listingId].buyer;\\n        tokenId = _tokenListings[listingId].tokenId;\\n        listingPrice = _tokenListings[listingId].listingPrice;\\n\\n        releaseTime = _tokenListings[listingId].releaseTime;\\n        disputeTime = _tokenListings[listingId].disputeTime;\\n        insuranceAmount = _tokenListings[listingId].insuranceAmount;\\n        minimumBid = _tokenListings[listingId].minimumBid;\\n        status = uint256(_tokenListings[listingId].status);\\n        listingType = uint256(_tokenListings[listingId].listingType);\\n    }\\n}\\n\",\"keccak256\":\"0x7dfe5f47d2547f0b7ea5318f42bea6f2c71d5add213734fe7e629a5d8f99ec89\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartFiMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport './MarketPlaceListing.sol';\\nimport './MarketPlaceBid.sol';\\nimport './StartFiMarketPlaceSpecialOffer.sol';\\nimport './interface/IERC721.sol';\\n\\nimport './library/StartFiFinanceLib.sol';\\nimport './interface/IERC20.sol';\\n\\n/**\\n \\n *@title StartFi MarketPlace\\n *desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares\\n *\\n */\\ncontract StartFiMarketPlace is StartFiMarketPlaceSpecialOffer, MarketPlaceListing, MarketPlaceBid {\\n    /******************************************* decalrations go here ********************************************************* */\\n    //\\n    uint256 public listingCounter;\\n    // events when auction created auction bid auction cancled auction fullfiled item listed , item purchesed , item delisted ,  item  disputed , user release reserved ,\\n    ///\\n\\n    event DeListOffMarketplace(bytes32 listId, address token, address owner, uint256 tokenId, uint256 timestamp);\\n    event MigrateEmergency(\\n        bytes32 listId,\\n        address token,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 fineFees,\\n        uint256 releaseTime,\\n        uint256 timestamp\\n    );\\n\\n    event ListOnMarketplace(\\n        bytes32 listId,\\n        address indexed token,\\n        address seller,\\n        uint256 indexed tokenId,\\n        uint256 listingPrice,\\n        uint256 timestamp\\n    );\\n    event CreateAuction(\\n        bytes32 listId,\\n        address indexed token,\\n        address seller,\\n        uint256 indexed tokenId,\\n        uint256 listingPrice,\\n        uint256 minimumBid,\\n        uint256 releaseTime,\\n        uint256 insuranceAmount,\\n        uint256 timestamp\\n    );\\n\\n    event BidOnAuction(bytes32 bidId, bytes32 indexed listingId, address bidder, uint256 bidPrice, uint256 timestamp);\\n\\n    event FulfillBid(\\n        bytes32 bidId,\\n        bytes32 indexed listingId,\\n        address tokenAddress,\\n        address bidder,\\n        uint256 tokenId,\\n        uint256 bidPrice,\\n        address issuer,\\n        uint256 royaltyAmount,\\n        uint256 fees,\\n        uint256 netPrice,\\n        uint256 timestamp\\n    );\\n\\n    event DisputeAuction(\\n        bytes32 bidId,\\n        bytes32 indexed listingId,\\n        address tokenAddress,\\n        address bidder,\\n        uint256 tokenId,\\n        address seller,\\n        uint256 insuranceAmount,\\n        uint256 remaining,\\n        uint256 finefees,\\n        uint256 timestamp\\n    );\\n\\n    event BuyNow(\\n        bytes32 indexed listId,\\n        address token,\\n        address buyer,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 sellingPrice,\\n        address issuer,\\n        uint256 royaltyAmount,\\n        uint256 fees,\\n        uint256 netPrice,\\n        uint256 timestamp\\n    );\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n        string memory _marketPlaceName,\\n        address _paymentContract,\\n        address _stakeContract,\\n        address adminWallet,\\n        uint256 usdCap_,\\n        uint256 stfiCap_,\\n        uint256 stfiUsdt_\\n    ) {\\n        _MarketplaceBase_init_unchained(_marketPlaceName);\\n        _MarketplaceAdmin_init_unchained(adminWallet);\\n        _MarketplaceFinance_init_unchained(_paymentContract);\\n        stakeContract = _stakeContract;\\n        // to be removed\\n        _usdCap = usdCap_;\\n        _stfiCap = stfiCap_;\\n        _stfiUsdt = stfiUsdt_;\\n        fulfillDuration = 3 days;\\n\\n        unpauseTimestamp = block.timestamp;\\n        _feeFraction = 25; // 2.5% fees\\n        _feeBase = 10; // 25/10=2.5\\n        stakeContract;\\n        listqualifyPercentage = 10;\\n        listqualifyPercentageBase = 10;\\n    }\\n\\n    // function initialize (\\n    //   string memory _marketPlaceName,\\n    //         address _paymentContract,\\n    //         address _stakeContract,\\n    //         address adminWallet,\\n    //           uint256 usdCap_,\\n    //         uint256 stfiCap_,\\n    //         uint256 stfiUsdt_\\n    //     ) {\\n    //         _MarketplaceBase_init_unchained(_marketPlaceName);\\n    //         _MarketplaceAdmin_init_unchained(adminWallet);\\n    //         _MarketplaceFinance_init_unchained(_paymentContract);\\n    //         stakeContract = _stakeContract;\\n    //         // to be removed\\n    //         _usdCap = usdCap_;\\n    //         _stfiCap = stfiCap_;\\n    //         _stfiUsdt = stfiUsdt_;\\n    //  fulfillDuration = 3 days;\\n\\n    //  unpauseTimestamp = block.timestamp;\\n    //  _feeFraction = 25; // 2.5% fees\\n    //  _feeBase = 10; // 25/10=2.5\\n    //  stakeContract;\\n    //  listqualifyPercentage = 10;\\n    //  listqualifyPercentageBase = 10;\\n    // }\\n\\n    /******************************************* modifiers go here ********************************************************* */\\n\\n    modifier isNotZero(uint256 val) {\\n        require(val > 0, 'Zero Value is not allowed');\\n        _;\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /******************************************* state functions go here ********************************************************* */\\n\\n    // // list\\n    /**\\n     * @dev  called by dapps to list new item\\n     * @param token nft contract address\\n     * @param tokenId token id\\n     * @param listingPrice min price\\n      **\\n      Users who want to list their NFT for sale with fixed price call this function \\n    - user MUST approve contract to transfer the NFT     \\n    - user MUST have enough stakes used as insurance to not delist the item before the duration stated in the smart contract , if they decided to delist before that time, they lose this insurance. the required insurance amount is a percentage  based on the listing price.\\n    ** \\n    emit : ListOnMarketplace\\n     */\\n    function listOnMarketplace(\\n        address token,\\n        uint256 tokenId,\\n        uint256 listingPrice\\n    ) public whenNotPaused isNotZero(listingPrice) {\\n        listingCounter++;\\n        bytes32 listId = keccak256(abi.encodePacked(token, tokenId, _msgSender(), block.timestamp, listingCounter));\\n        listings.push(listId);\\n        require(\\n            IERC721(token).getApproved(tokenId) == address(this) ||\\n                IERC721(token).isApprovedForAll(_msgSender(), address(this)),\\n            'Marketplace is not allowed to transfer your token'\\n        );\\n\\n        _tokenListings[listId] = Listing(\\n            token,\\n            _msgSender(),\\n            address(0),\\n            tokenId,\\n            listingPrice,\\n            block.timestamp,\\n            0,\\n            0,\\n            0,\\n            ListingType.FixedPrice,\\n            ListingStatus.OnMarket\\n        );\\n        emit ListOnMarketplace(listId, token, _msgSender(), tokenId, listingPrice, block.timestamp);\\n        IERC721(token).safeTransferFrom(_msgSender(), address(this), tokenId);\\n    }\\n\\n    // list\\n    /**\\n     * @dev  called by dapps to list new item\\n     * @param token nft contract address\\n     * @param tokenId token id\\n     * @param listingPrice min price\\n      * @param deadline:  must be timestamp in future .\\n     * @param v needed to recover the public key\\n     * @param r : normal output of an ECDSA signature\\n     * @param s: normal output of an ECDSA signature\\n     * `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.\\n  \\n      **\\n     Users who want to list their NFT for sale with fixed price call this function without sending prior transaction to `approve` the marketplace to transfer NFT. This function call`permit` [`eip-2612`] then call [`listOnMarketplace`] internally\\n     **\\n     */\\n    function listOnMarketplaceWithPermit(\\n        address token,\\n        uint256 tokenId,\\n        uint256 listingPrice,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(_permitNFT(token, _msgSender(), tokenId, deadline, v, r, s), 'invalid signature');\\n        listOnMarketplace(token, tokenId, listingPrice);\\n    }\\n\\n    // create auction\\n    /**\\n     * @dev  called by dapps to create  new auction\\n     * @param token nft contract address\\n     * @param tokenId token id\\n     * @param minimumBid minimum Bid price\\n     * @param insuranceAmount  amount of token locked as qualify for any bidder wants bid\\n     * @param isSellForEnabled true if auction enable direct selling\\n     * @param listingPrice  price  to sell with if isSellForEnabled=true\\n     * @param duration  when auction ends\\n     * @return listId listing id\\n     ** \\n     Users who want to list their NFT as auction for bidding with/without allowing direct sale.\\n    - user MUST approve contract to transfer the NFT     \\n    - Time to live auction duration must be more than 12 hours.\\n    - if `sellForEnabled` is true, `sellFor` value must be more than zero\\n    - auction creator MUST specify the insurance amounts for any bidder to bid with considering that it MUST NOT be less that 1 USDT value in STFI. \\n    ** \\n    emit : CreateAuction\\n     */\\n    function createAuction(\\n        address token,\\n        uint256 tokenId,\\n        uint256 minimumBid,\\n        uint256 insuranceAmount,\\n        bool isSellForEnabled,\\n        uint256 listingPrice,\\n        uint256 duration\\n    ) public whenNotPaused isNotZero(minimumBid) returns (bytes32 listId) {\\n        ListingType _type;\\n\\n        if (isSellForEnabled) {\\n            require(listingPrice >= minimumBid, 'Zero price is not allowed');\\n            _type = ListingType.AuctionForSale;\\n        } else {\\n            listingPrice = 0;\\n            _type = ListingType.Auction;\\n        }\\n        require(duration > 12 hours, 'Auction should be live for more than 12 hours');\\n        require(insuranceAmount >= _stfiUsdt, 'Invalid Auction qualify Amount');\\n        uint256 releaseTime = block.timestamp + duration;\\n        listingCounter++;\\n        listId = keccak256(abi.encodePacked(token, tokenId, _msgSender(), releaseTime, listingCounter));\\n        listings.push(listId);\\n\\n        // check that sender is qualified\\n        require(\\n            IERC721(token).getApproved(tokenId) == address(this) ||\\n                IERC721(token).isApprovedForAll(_msgSender(), address(this)),\\n            'Marketplace is not allowed to transfer your token'\\n        );\\n\\n        // update reserved\\n        // create auction\\n        _tokenListings[listId] = Listing(\\n            token,\\n            _msgSender(),\\n            address(0),\\n            tokenId,\\n            listingPrice,\\n            releaseTime,\\n            releaseTime + fulfillDuration,\\n            insuranceAmount,\\n            minimumBid,\\n            _type,\\n            ListingStatus.OnMarket\\n        );\\n\\n        emit CreateAuction(\\n            listId,\\n            token,\\n            _msgSender(),\\n            tokenId,\\n            listingPrice,\\n            minimumBid,\\n            releaseTime,\\n            insuranceAmount,\\n            block.timestamp\\n        );\\n        // transfer token to contract\\n\\n        IERC721(token).safeTransferFrom(_msgSender(), address(this), tokenId);\\n    }\\n\\n    /**\\n     * @dev  called by dapps to create  new auction\\n     * @param token nft contract address\\n     * @param tokenId token id\\n     * @param listingPrice min price\\n     * @param insuranceAmount  amount of token locked as qualify for any bidder wants bid\\n     * @param isSellForEnabled true if auction enable direct selling\\n     * @param minimumBid  price  to sell with if isSellForEnabled=true\\n     * @param duration  when auction ends\\n     * @param deadline:  must be timestamp in future .\\n     * @param v needed to recover the public key\\n     * @param r : normal output of an ECDSA signature\\n     * @param s: normal output of an ECDSA signature\\n     * `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.\\n  \\n     * @return listId listing id\\n     ** \\n     Users who want to list their NFT as auction for bidding with/without allowing direct sale call this function without sending prior transaction to `approve` the marketplace to transfer NFT. This function call`permit` [`eip-2612`] then call [`createAuction`] internally.\\n     **\\n     */\\n    function createAuctionWithPermit(\\n        address token,\\n        uint256 tokenId,\\n        uint256 minimumBid,\\n        uint256 insuranceAmount,\\n        bool isSellForEnabled,\\n        uint256 listingPrice,\\n        uint256 duration,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (bytes32 listId) {\\n        require(_permitNFT(token, _msgSender(), tokenId, deadline, v, r, s), 'invalid signature');\\n        listId = createAuction(token, tokenId, minimumBid, insuranceAmount, isSellForEnabled, listingPrice, duration);\\n    }\\n\\n    /**\\n    ** Users who interested in a certain auction, can bid on it by calling this   function.Bidder don't pay / transfer SFTI on bidding. Only when win the auction [`the auction is ended and this bidder is the last one to bid`], bidder pays by calling [`fulfillBid`] OR [`buyNowWithPermit`]\\n    - user MUST have enough stakes used as insurance; grantee and punishment mechanism for malicious bidder. If the bidder don't pay in the  \\n    - Bidders can bid as much as they wants , insurance is taken once in the first participation \\n    - the bid price MUST be more than the last bid , if this is the first bid, the bid price MUST be more than or equal the minimum bid the auction creator state\\n    - Users CAN NOT bid on auction after auction time is over\\n    \\n    **\\n     * @dev called by dapps to bid on an auction\\n     *\\n     * @param listingId listing id\\n     * @param bidPrice price\\n     * emit : BidOnAuction\\n     */\\n    function bid(bytes32 listingId, uint256 bidPrice) external whenNotPaused {\\n        require(\\n            _tokenListings[listingId].releaseTime > block.timestamp &&\\n                _tokenListings[listingId].status == ListingStatus.OnMarket &&\\n                _tokenListings[listingId].listingType != ListingType.FixedPrice,\\n            'Auction is ended'\\n        );\\n        // bidder has bid before ?\\n        address lastbidder = bidToListing[listingId].bidder;\\n\\n        if (lastbidder == address(0)) {\\n            require(\\n                bidPrice >= _tokenListings[listingId].minimumBid,\\n                'bid price must be more than or equal the minimum price'\\n            );\\n        } else {\\n            require(bidPrice > listingBids[listingId][lastbidder].bidPrice, 'bid price must be more than the last bid');\\n        }\\n        bytes32 bidId;\\n        if (!listingBids[listingId][_msgSender()].isStakeReserved) {\\n            bidId = keccak256(\\n                abi.encodePacked(\\n                    listingId,\\n                    _tokenListings[listingId].token,\\n                    _msgSender(),\\n                    _tokenListings[listingId].tokenId\\n                )\\n            );\\n            uint256 insuranceAmount = _tokenListings[listingId].insuranceAmount;\\n            require(\\n                _getStakeAllowance(\\n                    _msgSender() /*, 0*/\\n                ) >= insuranceAmount,\\n                'Not enough reserves'\\n            );\\n\\n            // update user reserves\\n            // reserve Zero couldn't be at any case\\n            userReserves[_msgSender()] += insuranceAmount;\\n            listingBids[listingId][_msgSender()].isStakeReserved = true;\\n        } else {\\n            bidId = listingBids[listingId][lastbidder].bidId;\\n        }\\n\\n        // bid should be more than than the mini and more than the last bid\\n\\n        // if this is the bidder first bid, the price will be 0\\n\\n        // bid\\n        bidToListing[listingId] = WinningBid(bidId, _msgSender());\\n        // set isStakeReserved as true by default as the contract doesn't call this fucntion unless required checks have been done and met\\n        listingBids[listingId][_msgSender()] = Bid(bidId, bidPrice, false, true);\\n\\n        emit BidOnAuction(bidId, listingId, _msgSender(), bidPrice, block.timestamp);\\n\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n\\n    /**\\n    ** \\n    After the end of the Auction, the winner bidder , the last bidder call this function within a certain duration to pay and get the NFT\\n    - user MUST approve contract to transfer the STFI tokens , MUST NOT be less than the bid price     \\n    - Winner bidder can call it within the `fulfillDuration` right after the end of the auction.\\n    - Winner bider can call it even after the its end as long as the auction reactor has not called dispute. the winner bidder can have chat with the seller  and if the auction creator thinks the winner bidder is not a malicious bidder,  they might agree to wait so we don't want to prevent the scenario where the can see eye to eye. At the end the auction creator wants to buy the NFT and get the price\\n    - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`] \\n    **\\n    * emit : FulfillBid\\n     * @dev called by bidder through dapps when bidder win an auction and wants to pay to get the NFT\\n     *\\n     * @param listingId listing id\\n \\n     */\\n    function fulfillBid(bytes32 listingId) public whenNotPaused {\\n        require(\\n            _tokenListings[listingId].releaseTime < block.timestamp &&\\n                _tokenListings[listingId].listingType != ListingType.FixedPrice,\\n            'Auction is not ended or no longer on auction'\\n        );\\n        address winnerBidder = bidToListing[listingId].bidder;\\n        address seller = _tokenListings[listingId].seller;\\n        address _token = _tokenListings[listingId].token;\\n        uint256 tokenId = _tokenListings[listingId].tokenId;\\n        uint256 bidPrice = listingBids[listingId][winnerBidder].bidPrice;\\n        uint256 insuranceAmount = _tokenListings[listingId].insuranceAmount;\\n\\n        require(winnerBidder == _msgSender(), 'Caller is not the winner');\\n        // if it's new, the price will be 0\\n        if (bidPrice > _stfiCap) {\\n            require(kycedDeals[listingId], 'StartfiMarketplace: Price exceeded the cap. You need to get approved');\\n        }\\n        //check that contract is allowed to transfer tokens\\n        require(\\n            IERC20(_paymentToken).allowance(winnerBidder, address(this)) >= bidPrice,\\n            'Marketplace is not allowed to withdraw the required amount of tokens'\\n        );\\n        StartFiFinanceLib.ShareInput memory _input;\\n        _input.tokenId = tokenId;\\n        _input.token = _token;\\n        _input.price = bidPrice;\\n        (_input.fee, _input.feeBase) = _getFees(seller);\\n\\n        StartFiFinanceLib.ShareOutput memory _output = StartFiFinanceLib._getListingFinancialInfo(_input);\\n\\n        listingBids[listingId][winnerBidder].isStakeReserved = false;\\n        listingBids[listingId][winnerBidder].isPurchased = true;\\n        _tokenListings[listingId].status = ListingStatus.Sold;\\n        _tokenListings[listingId].buyer = winnerBidder;\\n\\n        // update user reserves\\n        // reserve nigative couldn't be at any case\\n\\n        userReserves[winnerBidder] -= insuranceAmount;\\n\\n        //   TODO: add reputation points to both seller and buyer\\n        // _addreputationPoints(seller, winnerBidder, bidPrice);\\n\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n        emit FulfillBid(\\n            bidToListing[listingId].bidId,\\n            listingId,\\n            _token,\\n            winnerBidder,\\n            tokenId,\\n            bidPrice,\\n            _output.issuer,\\n            _output.royaltyAmount,\\n            _output.fees,\\n            _output.netPrice,\\n            block.timestamp\\n        );\\n\\n        require(\\n            IERC20(_paymentToken).transferFrom(_msgSender(), _adminWallet, _output.fees),\\n            \\\"Couldn't transfer token as fees\\\"\\n        );\\n        // if the issuer is the seller , no need to send two 2 transfer transaction , let's do it 1 to reduce gas\\n        if (_output.issuer == seller) {\\n            _output.netPrice += _output.royaltyAmount;\\n        } else if (_output.issuer != address(0) && _output.royaltyAmount != 0) {\\n            require(\\n                IERC20(_paymentToken).transferFrom(_msgSender(), _output.issuer, _output.royaltyAmount),\\n                \\\"Couldn't transfer token to issuer\\\"\\n            );\\n        }\\n        require(\\n            IERC20(_paymentToken).transferFrom(_msgSender(), seller, _output.netPrice),\\n            \\\"Couldn't transfer token to seller\\\"\\n        );\\n        IERC721(_token).safeTransferFrom(address(this), _msgSender(), tokenId);\\n    }\\n\\n    /**\\n    **After the end of the Auction, the winner bidder , the last bidder call this function within a certain duration to pay and get the NFT, they call this function without sending prior transaction to `approve` the marketplace to transfer STFI. This function call`permit` [`eip-2612`] then call [`fulfillBid`] internally.\\n    ** \\n     * @dev called by bidder through dapps when bidder win an auction and wants to pay to get the NFT\\n     *\\n     * @param listingId listing id\\n     * @param deadline:  must be timestamp in future .\\n     * @param v needed to recover the public key\\n     * @param r : normal output of an ECDSA signature\\n     * @param s: normal output of an ECDSA signature\\n     * `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.\\n       * @param listingId listing id\\n  \\n\\n     */\\n    function fulfillBidWithPermit(\\n        bytes32 listingId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        IERC20(_paymentToken).permit(\\n            _msgSender(),\\n            address(this),\\n            listingBids[listingId][_msgSender()].bidPrice,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        fulfillBid(listingId);\\n    }\\n\\n    // delist\\n\\n    /**\\n    ** Users who no longer want to keep their NFT in our marketplace can easly call this function to get their NFT back. Unsuccessful auction creators need to call it as well to get their nft back with no cost as well as the item added via [`listOnMarketplace`] or [`listOnMarketplaceWithPermit`]  \\n    - Only buyers can delist their own items \\n    - Auction items can't delisted until the auction ended\\n    **\\n     * @dev called by seller through dapps when s/he wants to remove this token from the marketplace\\n     * @notice auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine\\n     * @param listingId listing id\\n\\n     * emit DeListOffMarketplace\\n     */\\n    function deList(bytes32 listingId) external whenNotPaused {\\n        ListingType _type = _tokenListings[listingId].listingType;\\n        ListingStatus status = _tokenListings[listingId].status;\\n        address buyer = _tokenListings[listingId].buyer;\\n        address _owner = _tokenListings[listingId].seller;\\n        address _token = _tokenListings[listingId].token;\\n        uint256 tokenId = _tokenListings[listingId].tokenId;\\n        require(status == ListingStatus.OnMarket, 'Item is not on Auction or Listed for sale');\\n\\n        require(_owner == _msgSender(), 'Caller is not the owner');\\n        require(buyer == address(0), 'Already bought token');\\n\\n        if (_type != ListingType.FixedPrice) {\\n            uint256 releaseTime = _tokenListings[listingId].releaseTime;\\n            uint256 timeToDelistAuction = releaseTime + fulfillDuration;\\n            require((timeToDelistAuction <= block.timestamp), 'Not the time to Delist auction');\\n        }\\n\\n        // finish listing\\n        _tokenListings[listingId].status = ListingStatus.Canceled;\\n        emit DeListOffMarketplace(listingId, _token, _owner, tokenId, block.timestamp);\\n        // trnasfer token\\n\\n        IERC721(_token).safeTransferFrom(address(this), _msgSender(), tokenId);\\n    }\\n\\n    // buynow\\n    /**\\n    **  Users who want to buy an NFT from the marketplace whether it's fixed price or auction with `sellForEnabled = true` can call this function.\\n    - User MUST approve contract to transfer the STFI token , MUST NOT be less than the price.\\n   - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`]\\n   **\\n     * @dev called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace\\n     * @notice  if auction, the seller must enabe forSale. prices should be more than or equal the listing price\\n     * @param listingId listing id\\n     * emit : BuyNow\\n     */\\n    function buyNow(bytes32 listingId) public whenNotPaused {\\n        ListingStatus status = _tokenListings[listingId].status;\\n        ListingType _type = _tokenListings[listingId].listingType;\\n        uint256 price = _tokenListings[listingId].listingPrice;\\n        uint256 tokenId = _tokenListings[listingId].tokenId;\\n        address seller = _tokenListings[listingId].seller;\\n        address _token = _tokenListings[listingId].token;\\n        require(status == ListingStatus.OnMarket && _type != ListingType.Auction, 'Item is not for sale');\\n\\n        if (_type == ListingType.AuctionForSale) {\\n            require(_tokenListings[listingId].releaseTime > block.timestamp, 'Item is not for sale');\\n        }\\n        if (price > _stfiCap) {\\n            require(kycedDeals[listingId], 'StartfiMarketplace: Price exceeded the cap. You need to get approved');\\n        }\\n\\n        // check that contract is allowed to transfer tokens\\n        require(\\n            IERC20(_paymentToken).allowance(_msgSender(), address(this)) >= price,\\n            'Marketplace is not allowed to withdraw the required amount of tokens'\\n        );\\n        StartFiFinanceLib.ShareInput memory _input;\\n        _input.tokenId = tokenId;\\n        _input.token = _token;\\n        _input.price = price;\\n        (_input.fee, _input.feeBase) = _getFees(seller);\\n\\n        StartFiFinanceLib.ShareOutput memory _output = StartFiFinanceLib._getListingFinancialInfo(_input);\\n\\n        // finish listing\\n        _tokenListings[listingId].status = ListingStatus.Sold;\\n        _tokenListings[listingId].buyer = _msgSender();\\n        // _addreputationPoints(seller, _msgSender(), price);\\n        emit BuyNow(\\n            listingId,\\n            _token,\\n            _msgSender(),\\n            seller,\\n            tokenId,\\n            price,\\n            _output.issuer,\\n            _output.royaltyAmount,\\n            _output.fees,\\n            _output.netPrice,\\n            block.timestamp\\n        );\\n        require(\\n            IERC20(_paymentToken).transferFrom(_msgSender(), _adminWallet, _output.fees),\\n            \\\"Couldn't transfer token as fees\\\"\\n        );\\n        // if the issuer is the seller , no need to send two 2 transfer transaction , let's do it 1 to reduce gas\\n        if (_output.issuer == seller) {\\n            _output.netPrice += _output.royaltyAmount;\\n        } else if (_output.issuer != address(0) && _output.royaltyAmount != 0) {\\n            require(\\n                IERC20(_paymentToken).transferFrom(_msgSender(), _output.issuer, _output.royaltyAmount),\\n                \\\"Couldn't transfer token to issuer\\\"\\n            );\\n        }\\n\\n        // token value could be zero ater taking the roylty share ??? need to ask?\\n        require(\\n            IERC20(_paymentToken).transferFrom(_msgSender(), seller, _output.netPrice),\\n            \\\"Couldn't transfer token to seller\\\"\\n        );\\n        // trnasfer token\\n        IERC721(_token).safeTransferFrom(address(this), _msgSender(), tokenId);\\n    }\\n\\n    // //\\n    // /**\\n    // **\\n    // Users who want to buy an NFT from the marketplace whether it's fixed price or auction with `sellForEnabled = true` can this call this function without sending prior transaction to `approve` the marketplace to transfer STFI tokens. This function call`permit` [`eip-2612`] then call [`buyNow`] internally.\\n    // **\\n    //  * @dev called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace\\n    //  * @notice  if auction, the seller must enabe forSale. prices should be more than or equal the listing price\\n    //  * @param listingId listing id\\n    //  * @param price gevin price\\n    //  * @param deadline:  must be timestamp in future .\\n    //  * @param v needed to recover the public key\\n    //  * @param r : normal output of an ECDSA signature\\n    //  * @param s: normal output of an ECDSA signature\\n    //  * `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.\\n\\n    function buyNowWithPermit(\\n        bytes32 listingId,\\n        uint256 price,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        IERC20(_paymentToken).permit(_msgSender(), address(this), price, deadline, v, r, s);\\n\\n        buyNow(listingId);\\n    }\\n\\n    /**\\n    ** \\n    If the winning bidder didn't pay within the time range stated in te contract `fulfillDuration`, Auction creator calls this function to get the nft back and punish the malicious bidder by taking the insurance (50% goes to the auction staking balance, 50% goes to the platform)\\n    - Current time  MUST be more than or equal the `disputeTime` for this auction     \\n    - Only auction Creator can dispute.\\n    - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, and the auction is approved , auction creator can dispute, if it's not approved yet, auction creator can not.\\n- [`buyNow`]: Users who want to buy an NFT from the marketplace whether it's fixed price or auction with `sellForEnabled = true` can call this function.\\n    - User MUST approve contract to transfer the STFI token , MUST NOT be less than the price.\\n   - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`]\\n   **\\n     * @dev called by seller through dapps when his/her auction is  not fulfilled after 3 days\\n     *  @notice  after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner\\n     * @param listingId listing id\\n     * @return _token nft contract address\\n     * @return tokenId token id\\n     * emit : DisputeAuction\\n     */\\n    function disputeAuction(bytes32 listingId) external whenNotPaused returns (address _token, uint256 tokenId) {\\n        address winnerBidder = bidToListing[listingId].bidder;\\n\\n        address seller = _tokenListings[listingId].seller;\\n        _token = _tokenListings[listingId].token;\\n        ListingType _type = _tokenListings[listingId].listingType;\\n        tokenId = _tokenListings[listingId].tokenId;\\n        uint256 insuranceAmount = _tokenListings[listingId].insuranceAmount;\\n        uint256 timeToDispute = _tokenListings[listingId].disputeTime;\\n        require(seller == _msgSender(), 'Only Seller can dispute');\\n        require(\\n            _tokenListings[listingId].status == ListingStatus.OnMarket && _type != ListingType.FixedPrice,\\n            'Marketplace: Item is not on Auction'\\n        );\\n        require(winnerBidder != address(0), 'Marketplace: Auction has no bids');\\n        require(timeToDispute <= block.timestamp, 'Marketplace: Can not dispute before time');\\n        require(\\n            unpauseTimestamp + fulfillDuration < block.timestamp,\\n            'Contract has justed unpaused, please give the bidder time to fulfill'\\n        );\\n\\n        if (listingBids[listingId][winnerBidder].bidPrice > _stfiCap) {\\n            require(kycedDeals[listingId], 'StartfiMarketplace: Price exceeded the cap. You need to get approved');\\n        }\\n        //50% goes to the platform\\n        (uint256 fineAmount, uint256 remaining) = StartFiFinanceLib._calcBidDisputeFees(insuranceAmount);\\n        // call staking contract to deduct\\n        require(\\n            _deduct(winnerBidder, _adminWallet, fineAmount),\\n            \\\"Marketplace: couldn't deduct the fine for the admin wallet\\\"\\n        );\\n        require(_deduct(winnerBidder, seller, remaining), \\\"Marketplace: couldn't deduct the fine for the admin wallet\\\");\\n        listingBids[listingId][winnerBidder].isStakeReserved = false;\\n        userReserves[winnerBidder] -= insuranceAmount;\\n\\n        // finish listing\\n        _tokenListings[listingId].status = ListingStatus.Canceled;\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n        emit DisputeAuction(\\n            bidToListing[listingId].bidId,\\n            listingId,\\n            _token,\\n            winnerBidder,\\n            tokenId,\\n            seller,\\n            insuranceAmount,\\n            remaining,\\n            fineAmount,\\n            block.timestamp\\n        );\\n        // transfer token back\\n        IERC721(_token).safeTransferFrom(address(this), _msgSender(), tokenId);\\n    }\\n\\n    /**\\n    ** users need to stake STFI to bid in the marketplace , these tokens needs to set release if the auction is no longer active and user can use these stakes to bid  thus, function to release tokens reserved to listing of market \\n *  in order to let user batch release many lisiting , they can call `releaseBatchReserves`\\n * called by user/ third actors only when s/he wants rather than force the check & updates with every transaction which might be very costly .\\n   -  \\n   ** \\n    * @dev called by user through dapps when his/her wants to release his reserved tokens which are no longer in active auction .\\n    *  @notice called by user or on behalf of the user only when s/he wants rather than force the check & updates with every transaction which might be very costly .\\n     * @param listingId listing idbehalf\\n     * @param bidder bidder address\\n     * emit : UserReservesRelease\\n     */\\n    function releaseListingReserves(bytes32 listingId, address bidder) public {\\n        require(listingBids[listingId][bidder].bidPrice != 0, 'Bidder is not participating in this auction');\\n        require(listingBids[listingId][bidder].isStakeReserved, 'Already released');\\n        require(_tokenListings[listingId].releaseTime < block.timestamp, 'Can not release stakes for running auction');\\n        require(\\n            bidToListing[listingId].bidder != bidder,\\n            'Winner bidder can  only  release stakes by fulfilling the auction'\\n        );\\n        _releaseListingReserves(listingId, bidder);\\n    }\\n\\n    function _releaseListingReserves(bytes32 listingId, address bidder) private {\\n        uint256 lastReserves = userReserves[bidder];\\n        uint256 insuranceAmount = _tokenListings[listingId].insuranceAmount;\\n        userReserves[bidder] -= insuranceAmount;\\n\\n        listingBids[listingId][bidder].isStakeReserved = false;\\n        uint256 curentReserves = userReserves[bidder];\\n        emit UserReservesRelease(bidder, lastReserves, curentReserves, block.timestamp);\\n    }\\n\\n    function releaseBatchReserves(bytes32[] memory listingIds, address bidder) external {\\n        for (uint256 index = 0; index < listingIds.length; index++) {\\n            releaseListingReserves(listingIds[index], bidder);\\n        }\\n    }\\n\\n    /**\\n    *STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and any purchase transaction with price exceed the cap can't be proceed unless this deal is approved by Startfi by calling this function\\n- called only by account in owner role\\n     * @dev only called by `owner` to approve listing that exceeded cap after doing the KYC\\n     *@param listingId listing Id\\n     *@param status kyc status\\n     * emit HandelKyc\\n     */\\n    function approveDeal(bytes32 listingId, bool status) external onlyOwner whenNotPaused {\\n        require(_tokenListings[listingId].status == ListingStatus.OnMarket, 'StartFiMarketplace: Invalid item');\\n        /**\\n       we have the following scenario : \\n       * auction bid get higher than the cap , and needs to get approved \\n       * kyc process for anyreason takes some longer time that might exceed the time to dispute \\n       * malicious auction creator call diputeAuction and winner bider loses money \\n       * to protect we put condition on dispute to check if the bid price exceed cap and the deal is approved in order to proceed because at this case this is malicious bidder\\n       * second condition is in deal approval, if we have approved the deal before time to realse ( we are monitoring the marketplace when the auction bids exceed the cap , we can  ) \\n       */\\n        if (status) {\\n            if (_tokenListings[listingId].listingType != ListingType.FixedPrice) {\\n                if (_tokenListings[listingId].releaseTime < block.timestamp) {\\n                    _tokenListings[listingId].disputeTime = block.timestamp + fulfillDuration;\\n                }\\n            }\\n            kycedDeals[listingId] = true;\\n        } else {\\n            address seller = _tokenListings[listingId].seller;\\n            kycedDeals[listingId] = false;\\n            _tokenListings[listingId].status = ListingStatus.Canceled;\\n            if (_tokenListings[listingId].listingType != ListingType.FixedPrice) {\\n                _releaseListingReserves(listingId, seller);\\n            }\\n            IERC721(_tokenListings[listingId].token).safeTransferFrom(\\n                address(this),\\n                seller,\\n                _tokenListings[listingId].tokenId\\n            );\\n        }\\n        emit HandelKyc(listingId, _msgSender(), status, block.timestamp);\\n    }\\n\\n    /** **************************Emergency Zone ********************/\\n\\n    /**\\n    **\\n    Only when contract is paused, users can safely delist their token with no cost. Startfi team might have to pause the contract to make any update on the protocol terms or in emergency if high risk vulnerability is discovered to protect the users.    \\n   - Only buyers can delist their own items \\n   **\\n     * @dev called by seller through dapps when s/he wants to remove this token from the marketplace\\n     * @notice called only when puased , let user to migrate for release if they don't agree on our new terms\\n     * @param listingId listing id\\n\\n     * emit : MigrateEmergency\\n     */\\n    function migrateEmergency(bytes32 listingId) external whenPaused {\\n        ListingStatus status = _tokenListings[listingId].status;\\n        address buyer = _tokenListings[listingId].buyer;\\n        address _owner = _tokenListings[listingId].seller;\\n        address _token = _tokenListings[listingId].token;\\n        uint256 releaseTime = _tokenListings[listingId].releaseTime;\\n        uint256 tokenId = _tokenListings[listingId].tokenId;\\n        require(_owner == _msgSender(), 'Caller is not the owner');\\n        require(buyer == address(0), 'Already bought token');\\n        require(status == ListingStatus.OnMarket, 'Already bought or canceled token');\\n\\n        // finish listing\\n        _tokenListings[listingId].status = ListingStatus.Canceled;\\n        emit MigrateEmergency(\\n            listingId,\\n            _token,\\n            _owner,\\n            tokenId,\\n            _tokenListings[listingId].insuranceAmount,\\n            releaseTime,\\n            block.timestamp\\n        );\\n        IERC721(_token).safeTransferFrom(address(this), _owner, tokenId);\\n    }\\n\\n    /**  private functions go here  */\\n\\n    function _getFees(address seller) private view returns (uint256 fee, uint256 feeBase) {\\n        if (offerTerms[seller].fee != 0) {\\n            fee = offerTerms[seller].fee;\\n            feeBase = offerTerms[seller].feeBase;\\n        } else {\\n            fee = _feeFraction;\\n            feeBase = _feeBase;\\n        }\\n    }\\n\\n    // erc721\\n    /**\\n     *\\n     * @dev  interal function to check if any gevin contract has supportsInterface See {IERC165-supportsInterface}.\\n     * @param _token NFT contract address\\n     * @return true if this NFT contract support royalty, false if not\\n     */\\n    function _supportPermit(address _token) private view returns (bool) {\\n        try IERC721(_token).supportsInterface(0x2a55205a) returns (bool isPermitSupported) {\\n            return isPermitSupported;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n    * @dev called by the contract to get who much token this contract is allowed to spend from the `owner` account\\n     * @param _token nft contract address\\n     * @param tokenId token id\\n     * @param target token owner\\n     * @param deadline:  must be timestamp in future .\\n     * @param v needed to recover the public key\\n     * @param r : normal output of an ECDSA signature\\n     * @param s: normal output of an ECDSA signature\\n     * `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.\\n  \\n     * @return true when done, false if not\\n     */\\n    function _permitNFT(\\n        address _token,\\n        address target,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) private returns (bool) {\\n        if (_supportPermit(_token)) {\\n            return IERC721(_token).permit(target, address(this), tokenId, deadline, v, r, s);\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x917bf0fd61e03508aee48f843c983ab51ac006fa099a54f9f1664d5df17fff0d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartFiMarketPlaceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n *@title  MarketPlace Admin\\n * [ desc ] : contract to handle the main functions for any marketplace\\n */\\nabstract contract StartFiMarketPlaceAdmin is AccessControlEnumerable, Pausable {\\n    /******************************************* decalrations go here ********************************************************* */\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\n    bytes32 public constant PRICE_FEEDER_ROLE = keccak256('PRICE_FEEDER_ROLE');\\n    address _adminWallet;\\n    uint256 public fulfillDuration;\\n\\n    uint256 public unpauseTimestamp;\\n    /******************************************* events goes here ********************************************************* */\\n    event ChangeReputationContract(address reputationContract);\\n    event ChangeUtilityToken(address utiltiyToken);\\n    event ChangeFulfillDuration(uint256 duration);\\n    event ChangeListInsuranceAmount(uint256 newFees, uint256 newBase);\\n    event ChangeMarketPlaceName(string Name);\\n    event ChangeFees(uint256 newFees, uint256 newBase);\\n    event UpdateAdminWallet(address newWallet);\\n    /******************************************* read state functions go here ********************************************************* */\\n    modifier onlyOwner() {\\n        require(hasRole(OWNER_ROLE, _msgSender()), 'caller is not the owner');\\n\\n        _;\\n    }\\n\\n    modifier notZeroAddress(address newAddress) {\\n        require(newAddress != address(0), 'Zero address is not allowed');\\n\\n        _;\\n    }\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    function _MarketplaceAdmin_init_unchained(address ownerAddress) internal {\\n        _setupRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n\\n        _setupRole(OWNER_ROLE, ownerAddress);\\n        // we are assigned it to the owner for now until the chainlink price feed contract gets finished. once finished we will remove owner from this role\\n\\n        _setupRole(PRICE_FEEDER_ROLE, ownerAddress);\\n        // we are assigned it to the owner for now until the contract gets finished. once finished we will remove owner from this role\\n        _adminWallet = ownerAddress;\\n    }\\n\\n    /******************************************* state functions go here ********************************************************* */\\n\\n    /**\\n     * @dev Pauses contract.\\n     *\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     */\\n    function pause() external virtual onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses contract.\\n     *\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     */\\n    function unpause() external virtual onlyOwner whenPaused {\\n        unpauseTimestamp = block.timestamp;\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev update the admin wallet address.\\n     *\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the admin.\\n     * - the `newWallet` must not be empty.\\n     */\\n    function updateAdminWallet(address newWallet) external notZeroAddress(newWallet) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'UnAuthorized');\\n        _adminWallet = newWallet;\\n        _setupRole(DEFAULT_ADMIN_ROLE, newWallet);\\n        emit UpdateAdminWallet(newWallet);\\n    }\\n\\n    function changeFulfillDuration(uint256 _duration) external onlyOwner whenPaused {\\n        require(_duration > 1 days);\\n        fulfillDuration = _duration;\\n        emit ChangeFulfillDuration(_duration);\\n    }\\n}\\n\",\"keccak256\":\"0x8b83a401a5556c5f52d97adf087530c0de18e5dc11ad6b098314b7e17182d576\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartFiMarketPlaceCap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\nimport './StartFiMarketPlaceFinance.sol';\\n\\n/**\\n \\n *desc   contract to manage the deal cap to keep all our transaction regulated\\n *  Startfi is MarketPlaceBid entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the purchase transaction can't be proceed unless this deal is approved by Startfi by calling [approveDeal]\\n * @title StartFi Marketplace Cap\\n */\\ncontract StartFiMarketPlaceCap is StartFiMarketPlaceFinance {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    uint256 internal _usdCap;\\n    uint256 internal _stfiCap;\\n    uint256 internal _stfiUsdt; // how many STFI per 1 usd?\\n    mapping(bytes32 => bool) internal kycedDeals;\\n    event HandelKyc(bytes32 indexed listId, address approver, bool status, uint256 timestamp);\\n\\n    /******************************************* read functions go here ********************************************************* */\\n\\n    function isApprovedDeal(bytes32 listingId) external view returns (bool status) {\\n        status = kycedDeals[listingId];\\n    }\\n\\n    /******************************************* state functions go here ********************************************************* */\\n    function usdCap() external view returns (uint256) {\\n        return _usdCap;\\n    }\\n\\n    function stfiCap() external view returns (uint256) {\\n        return _stfiCap;\\n    }\\n\\n    function stfiUsdt() external view returns (uint256) {\\n        return _stfiUsdt;\\n    }\\n\\n    /**\\n     *  @dev only called by `owner` to update the cap\\n     * @param usdCap_  the new fees value to be stored\\n     */\\n    function setUsdCap(uint256 usdCap_) external onlyOwner whenPaused {\\n        require(usdCap_ > 0, 'StartFiMarketplaceCap: cap must be more than zero');\\n        _usdCap = usdCap_;\\n    }\\n\\n    /**\\n     *  @dev only called by  `priceFeeds` to update the STFI/usdt price\\n     * @param _stfiPrice  the new stfi price per usdt\\n     */\\n    function setPrice(uint256 _stfiPrice) external {\\n        require(hasRole(PRICE_FEEDER_ROLE, _msgSender()), 'StartFiMarketPlace: UnAuthorized');\\n        // set\\n        _stfiUsdt = _stfiPrice;\\n        _stfiCap = _stfiPrice * _usdCap;\\n    }\\n}\\n\",\"keccak256\":\"0xb4990ef23c48043f461b03f3862f5ee413c5efa06860098d1f253eae94181777\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartFiMarketPlaceFinance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport './interface/IStartFiStakes.sol';\\nimport './library/StartFiFinanceLib.sol';\\nimport './MarketPlaceBase.sol';\\n\\n/**\\n *desc   contract to handle all financial work for the marketplace\\n * @title StartFi Marketplace Finance\\n */\\ncontract StartFiMarketPlaceFinance is MarketPlaceBase {\\n    /******************************************* decalrations go here ********************************************************* */\\n    address internal _paymentToken;\\n    uint256 internal _feeFraction; // 2.5% fees\\n    uint256 internal _feeBase; // 25/10=2.5\\n    address public stakeContract;\\n    uint256 public listqualifyPercentage;\\n    uint256 public listqualifyPercentageBase;\\n    mapping(address => uint256) internal userReserves;\\n\\n    event UserReservesRelease(address user, uint256 lastReserves, uint256 newReserves, uint256 timestamp);\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    function _MarketplaceFinance_init_unchained(address _paymentContract) internal {\\n        _paymentToken = _paymentContract;\\n    }\\n\\n    /******************************************* modifiers go here ********************************************************* */\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /**\\n     *\\n     * @return the value of the state variable `_feeFraction`\\n     */\\n    function getServiceFee() external view returns (uint256) {\\n        return _feeFraction;\\n    }\\n\\n    /**\\n     * @dev called by the dapp to get the user stakes on hold\\n     *@param user  : participant address\\n     * @return the value of user reserves\\n     */\\n    function getUserReserved(address user) external view returns (uint256) {\\n        return userReserves[user];\\n    }\\n\\n    /**\\n     * @dev this function calls StartFiStakes contract to get the total staked tokens for 'user' an substract the current reserves to get the total number of free tokens\\n     * @param staker : participant address\\n     * @return allowed number of tokens that this contract can transfer from the owner account\\n     */\\n    function getStakeAllowance(\\n        address staker /*,uint256 prevAmount*/\\n    ) external view returns (uint256) {\\n        return _getStakeAllowance(staker);\\n    }\\n\\n    function _getStakeAllowance(\\n        address staker /*,uint256 prevAmount*/\\n    ) internal view returns (uint256) {\\n        // user can bid multi time, we want to make sure we don't calc the old bid as sperated bid\\n        uint256 userActualReserved = userReserves[staker]; //.sub(prevAmount);\\n        return IStartFiStakes(stakeContract).getReserves(staker) - userActualReserved;\\n    }\\n\\n    /******************************************* state functions go here ********************************************************* */\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev this function calls StartFiStakes contract to subtract the user stakes and add that value to the 'to'\\n     * @param finePayer : fine payer address\\n     * @param to : participant address\\n     * @param amount : value to be deducted from his stakes as a fine\\n     * @return true if it's done\\n     */\\n    function _deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return IStartFiStakes(stakeContract).deduct(finePayer, to, amount);\\n    }\\n\\n    /**\\n     *  @notice only called by `owner` to change the name and `whenPaused`\\n     * @dev  the formula is (fees * 1000)/base\\n     * @param numerator  the new fees value to be stored\\n     * @param donomirator  the new basefees value to be stored\\n     * @return percentage the value of the state variable `_feeFraction`\\n     */\\n    function changeFees(uint256 numerator, uint256 donomirator)\\n        external\\n        onlyOwner\\n        whenPaused\\n        returns (uint256 percentage)\\n    {\\n        percentage = StartFiFinanceLib._calcShare(numerator, donomirator);\\n        require(percentage <= 4 ether && percentage >= 1 ether, 'Percentage should be from 1-4 %');\\n\\n        _feeFraction = numerator;\\n        _feeBase = donomirator;\\n        emit ChangeFees(numerator, donomirator);\\n    }\\n\\n    /**\\n     * @dev only called by `owner` to change the name and `whenPaused`\\n     *@param _token token address\\n     *\\n     */\\n    function changeUtilityToken(address _token) external notZeroAddress(_token) onlyOwner whenPaused {\\n        _paymentToken = _token;\\n        emit ChangeUtilityToken(_token);\\n    }\\n\\n    /**\\n     * @notice only called by `owner` to change the name and `whenPaused`\\n     * @dev  the formula is (fees * 1000)/base\\n     * @param numerator  the new fees value to be stored\\n     * @param donomirator  the new basefees value to be stored\\n     * @return percentage the value of the state variable `_feeFraction`\\n     *\\n     */\\n    function changeListInsuranceAmount(uint256 numerator, uint256 donomirator)\\n        external\\n        onlyOwner\\n        whenPaused\\n        returns (uint256 percentage)\\n    {\\n        percentage = StartFiFinanceLib._calcShare(numerator, donomirator);\\n        require(percentage <= 4 ether && percentage >= 1 ether, 'Percentage should be from 1-4 %');\\n\\n        listqualifyPercentage = numerator;\\n        listqualifyPercentageBase = donomirator;\\n        emit ChangeListInsuranceAmount(numerator, donomirator);\\n    }\\n}\\n\",\"keccak256\":\"0x5784825841a5c849c8ed78925a33f1512e8911133f8780cf6304c99b50e122fa\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartFiMarketPlaceSpecialOffer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\nimport './StartFiMarketPlaceCap.sol';\\n\\n/**\\n \\n *desc   contract to manage the special deals.\\n * We might have some celebrities or big names who come to our platform though agreement, those users might need different terms and conditions and to enforce the agreement via smart contract we store them the contract and apply them in their deals\\n * @title StartFi Marketplace Special Offer\\n */\\ncontract StartFiMarketPlaceSpecialOffer is StartFiMarketPlaceCap {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    mapping(address => conditions) internal offerTerms;\\n    struct conditions {\\n        uint256 fee; // 2.5% fees\\n        uint256 feeBase;\\n    }\\n    event NewOffer(\\n        address admin,\\n        address wallet,\\n        uint256 _fee, // 2.5% fees\\n        uint256 _feeBase\\n    );\\n\\n    /******************************************* read functions go here ********************************************************* */\\n\\n    /******************************************* state functions go here ********************************************************* */\\n\\n    /**\\n     * @dev only called by `owner` to change the name and `whenPaused`\\n     *@param wallet marketplace reputation contract\\n     *@param _fee marketplace reputation contract\\n\\n     *@param feeBase marketplace reputation contract\\n     *\\n     */\\n    function addOffer(\\n        address wallet,\\n        uint256 _fee, // 2.5% fees\\n        uint256 feeBase\\n    ) external onlyOwner whenNotPaused {\\n        require(offerTerms[wallet].fee == 0, 'Already exisit');\\n\\n        offerTerms[wallet] = conditions(_fee, feeBase);\\n        emit NewOffer(_msgSender(), wallet, _fee, feeBase);\\n    }\\n\\n    function getOffer(address wallet)\\n        external\\n        view\\n        returns (\\n            uint256 _fee, // 2.5% fees\\n            uint256 _base\\n        )\\n    {\\n        _fee = offerTerms[wallet].fee;\\n\\n        _base = offerTerms[wallet].feeBase;\\n    }\\n}\\n\",\"keccak256\":\"0x25e712368881e81ebfba7148e81b938ea300759594da5b42e9b7d7b11ac2e123\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address target,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d22d600ade2adb12fd50d554969893ed5d1ccef0d922b917a04bfe258beb1a9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface IERC721 is IERC165 {\\n    function permit(\\n        address target,\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe9a141457ee2c825688ec540b2bd00344d0a2c0ff7605feba20e4758da5a082a\",\"license\":\"MIT\"},\"contracts/interface/IERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IERC721Royalty {\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address issuer, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1bf70437cb5857efe4269fda994e5b7fa5522039e7ba6869c77cb0f1d4d6fd56\",\"license\":\"MIT\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IStartFiStakes {\\n    function getReserves(address owner) external view returns (uint256);\\n\\n    function deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e26b491e76af5e21d21a98750b118c422565b7bd2db1f8a9c0174dc99f83e93\",\"license\":\"MIT\"},\"contracts/library/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\n// Libraries\\n\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\nlibrary SafeDecimalMath {\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint256 public constant UNIT = 10**uint256(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint256(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return (x * y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = (x * y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return ((x * UNIT) / y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = ((x * (precisionUnit * 10)) / y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n        return i * UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR;\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n        uint256 quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    // Computes `a - b`, setting the value to 0 if b > a.\\n    function floorsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return b >= a ? 0 : a - b;\\n    }\\n}\\n\",\"keccak256\":\"0xf0ed2fd6c86b51ca16111caf1ea5142885852ac4f5d18ef326f8ac84309cd0c0\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/StartFiFinanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\nimport './StartFiRoyalityLib.sol';\\n\\nimport './SafeDecimalMath.sol';\\n\\nlibrary StartFiFinanceLib {\\n    using SafeDecimalMath for uint256;\\n\\n    struct ShareInput {\\n        address token;\\n        uint256 tokenId;\\n        uint256 price;\\n        uint256 fee;\\n        uint256 feeBase;\\n    }\\n    struct ShareOutput {\\n        address issuer;\\n        uint256 royaltyAmount;\\n        uint256 fees;\\n        uint256 netPrice;\\n    }\\n\\n    /**\\n     @dev calculat the platform fees\\n    *@param price  : item  price\\n    *@return fees the value that the platform will get\\n     */\\n    function _calcFees(\\n        uint256 price,\\n        uint256 _fee,\\n        uint256 _feeBase\\n    ) internal pure returns (uint256 fees) {\\n        // round decimal to the nearst value\\n        fees = price.multiplyDecimalRound((_fee.divideDecimal(_feeBase * 100)));\\n    }\\n\\n    /**\\n      @dev calculat the platform share when seller call disput\\n    *@param insuranceAmount  : seller defind value to be staked in order to participate in a gevin auction\\n    * @return fineAmount the value that the platform will get\\n    * @return remaining the value that the auction woner will get\\n     */\\n    function _calcBidDisputeFees(uint256 insuranceAmount)\\n        internal\\n        pure\\n        returns (uint256 fineAmount, uint256 remaining)\\n    {\\n        fineAmount = insuranceAmount.divideDecimalRound(2 ether); // divided by 2 * 18 decimal\\n\\n        remaining = insuranceAmount - fineAmount;\\n    }\\n\\n    function _calcShare(uint256 numerator, uint256 donomirator) internal pure returns (uint256 share) {\\n        share = numerator.divideDecimalRound(donomirator);\\n    }\\n\\n    /**\\n     *@dev  call the royaltyInfo function in nft contract\\n     *@param _input of type ShareInput\\n     *@return _output of type ShareOutput\\n     */\\n\\n    function _getListingFinancialInfo(ShareInput memory _input) internal view returns (ShareOutput memory _output) {\\n        _output.fees = _calcFees(_input.price, _input.fee, _input.feeBase);\\n        _output.netPrice = _input.price - _output.fees;\\n        // royalty check\\n        if (StartFiRoyalityLib._supportRoyalty(_input.token)) {\\n            (_output.issuer, _output.royaltyAmount) = StartFiRoyalityLib._getRoyaltyInfo(\\n                _input.token,\\n                _input.tokenId,\\n                _input.price\\n            );\\n            if (_output.royaltyAmount > 0 && _output.issuer != address(0)) {\\n                _output.netPrice = _output.netPrice - _output.royaltyAmount;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x143b6a98b4cec2e8444f4a86d3a8ba80c354381c04b3eae60e037c8b20e4773f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/library/StartFiRoyalityLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\nimport '../interface/IERC721Royalty.sol';\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\nlibrary StartFiRoyalityLib {\\n    bytes4 constant RORALTY_INTERFACE = 0x2a55205a;\\n\\n    /**\\n     *@notice  only if this contract has royaltyInfo function\\n     *@dev  call the royaltyInfo function in nft contract\\n     *@param _token NFT contract address\\n     *@param _tokenId token id\\n     *@param _value  token price\\n     *@return issuer original issuer address\\n     *@return royaltyAmount  the issuer total amount of tokens that he should recieve based on his share\\n     */\\n    function _getRoyaltyInfo(\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) internal view returns (address issuer, uint256 royaltyAmount) {\\n        (issuer, royaltyAmount) = IERC721Royalty(_token).royaltyInfo(_tokenId, _value);\\n    }\\n\\n    /**\\n     *\\n     * @dev  interal function to check if any gevin contract has supportsInterface See {IERC165-supportsInterface}.\\n     * @param _token NFT contract address\\n     * @return true if this NFT contract support royalty, false if not\\n     */\\n    function _supportRoyalty(address _token) internal view returns (bool) {\\n        try IERC165(_token).supportsInterface(RORALTY_INTERFACE) returns (bool isRoyaltySupported) {\\n            return isRoyaltySupported;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x873f6641f29199e963c3c4c840ecbe6d988e6d33c63a31ab27dc346a6100364f\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620062453803806200624583398101604081905262000034916200038c565b6002805460ff191690556200004987620000c2565b6200005484620000db565b600680546001600160a01b0319166001600160a01b038816179055600980546001600160a01b0319166001600160a01b039690961695909517909455600d91909155600e5550600f5550506203f480600355426004556019600755600a6008819055808055600b556200050c565b8051620000d7906005906020840190620002c9565b5050565b620000e860008262000168565b620001147fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8262000168565b620001407f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f78262000168565b600280546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6200017f8282620001ab60201b620043911760201c565b6000828152600160209081526040909120620001a69183906200439b620001b7821b17901c565b505050565b620000d78282620001d7565b6000620001ce836001600160a01b03841662000277565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000d7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002333390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620002c057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001d1565b506000620001d1565b828054620002d790620004b9565b90600052602060002090601f016020900481019282620002fb576000855562000346565b82601f106200031657805160ff191683800117855562000346565b8280016001018555821562000346579182015b828111156200034657825182559160200191906001019062000329565b506200035492915062000358565b5090565b5b8082111562000354576000815560010162000359565b80516001600160a01b03811681146200038757600080fd5b919050565b600080600080600080600060e0888a031215620003a7578283fd5b87516001600160401b0380821115620003be578485fd5b818a0191508a601f830112620003d2578485fd5b815181811115620003e757620003e7620004f6565b604051601f8201601f19908116603f01168101908382118183101715620004125762000412620004f6565b81604052828152602093508d848487010111156200042e578788fd5b8791505b8282101562000451578482018401518183018501529083019062000432565b828211156200046257878484830101525b9a50620004749150508a82016200036f565b9750505062000486604089016200036f565b945062000496606089016200036f565b93506080880151925060a0880151915060c0880151905092959891949750929550565b600181811c90821680620004ce57607f821691505b60208210811415620004f057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b615d29806200051c6000396000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c806369abe662116101de578063b3331bee1161010f578063d7ad4931116100ad578063e58378bb1161007c578063e58378bb14610944578063eb75c41014610959578063ec77bb8c1461099f578063ffd856ad146109b257600080fd5b8063d7ad493114610874578063de74e57b14610887578063e123ff581461089a578063e1a1d7ed146108cc57600080fd5b8063ca15c873116100e9578063ca15c87314610828578063cd772f5c1461083b578063d482ad9e1461084e578063d547741f1461086157600080fd5b8063b3331bee146107ef578063b381065b14610802578063c82f26011461081557600080fd5b80638ef291e91161017c57806391b7f5ed1161015657806391b7f5ed1461078a57806391d148541461079d578063a01a93b3146107d4578063a217fddf146107e757600080fd5b80638ef291e91461074f5780639010d07c14610764578063913d7ee21461077757600080fd5b80637b356561116101b85780637b356561146106a0578063805596a01461071757806383ed8063146107205780638456cb591461074757600080fd5b806369abe662146106615780636c2c9c7d146106845780637a59acd21461068d57600080fd5b80633a33ae80116102c357806356e9d1f3116102615780635eec0870116102305780635eec08701461062a578063611d45a21461063d5780636298c93a14610650578063649ee6831461065857600080fd5b806356e9d1f3146105f15780635add4b11146106045780635bbd49f41461060c5780635c975abb1461061f57600080fd5b80634b046d9b1161029d5780634b046d9b1461052e5780634b3ee2bb1461054157806356461e8e146105d557806356abf8d0146105de57600080fd5b80633a33ae801461050b5780633f4ba83a14610513578063421415cc1461051b57600080fd5b806321ecff5b1161033057806329c5cdf31161030a57806329c5cdf3146104c95780632a6bf14c146104dc5780632f2ff15d146104e557806336568abe146104f857600080fd5b806321ecff5b14610480578063248a9ca31461049357806329194964146104b657600080fd5b80631a1862271161036c5780631a186227146104045780631d9845231461042f5780631dee8488146104425780631f78fd0b1461045757600080fd5b806301ffc9a71461039357806311a1933c146103bb578063150b7a02146103cd575b600080fd5b6103a66103a1366004615631565b6109c5565b60405190151581526020015b60405180910390f35b6007545b6040519081526020016103b2565b6103eb6103db3660046151f9565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016103b2565b600954610417906001600160a01b031681565b6040516001600160a01b0390911681526020016103b2565b6103bf61043d36600461557a565b6109f0565b61045561045036600461559b565b610b13565b005b6103bf6104653660046151c1565b6001600160a01b03166000908152600c602052604090205490565b6103bf61048e36600461557a565b610b90565b6103bf6104a136600461550f565b60009081526020819052604090206001015490565b6104556104c436600461550f565b610ca0565b6104556104d73660046152a3565b610d65565b6103bf60035481565b6104556104f3366004615527565b61120b565b610455610506366004615527565b611232565b600e546103bf565b610455611254565b6103bf61052936600461533e565b6112b8565b61045561053c366004615439565b611328565b6105a161054f36600461550f565b60009081526015602090815260408083208054600191820154601485528386206001600160a01b0390911680875294529190932092830154600290930154909391929160ff8083169261010090041690565b604080519586526001600160a01b03909416602086015292840191909152151560608301521515608082015260a0016103b2565b6103bf600b5481565b6104556105ec3660046152a3565b611377565b6104556105ff36600461550f565b6114a8565b600f546103bf565b6103bf61061a3660046152d7565b6117be565b60025460ff166103a6565b6104556106383660046151c1565b611de3565b61045561064b36600461550f565b611ef9565b600d546103bf565b6103bf600a5481565b6103a661066f36600461550f565b60009081526010602052604090205460ff1690565b6103bf60165481565b6103bf61069b3660046151c1565b61212e565b6106b36106ae36600461550f565b612139565b604080516001600160a01b039c8d1681529a8c1660208c015298909a16978901979097526060880195909552608087019390935260a086019190915260c085015260e0840152610100830152610120820152610140810191909152610160016103b2565b6103bf60045481565b6103bf7f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f781565b61045561220a565b610757612269565b6040516103b2919061576d565b61041761077236600461557a565b6122fb565b610455610785366004615659565b61231a565b61045561079836600461550f565b6123be565b6103a66107ab366004615527565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6104556107e236600461550f565b61244c565b6103bf600081565b6104556107fd3660046153d5565b612bad565b610455610810366004615527565b612c10565b61045561082336600461550f565b612e21565b6103bf61083636600461550f565b612ebb565b61045561084936600461557a565b612ed2565b61045561085c366004615556565b61337f565b61045561086f366004615527565b61363c565b61045561088236600461550f565b613646565b6103bf61089536600461550f565b613cb4565b6108ad6108a836600461550f565b613cd5565b604080516001600160a01b0390931683526020830191909152016103b2565b61091c6108da366004615527565b60009182526014602090815260408084206001600160a01b03939093168452919052902080546001820154600290920154909260ff8083169261010090041690565b60408051948552602085019390935290151591830191909152151560608201526080016103b2565b6103bf600080516020615cd483398151915281565b61098a6109673660046151c1565b6001600160a01b0316600090815260116020526040902080546001909101549091565b604080519283526020830191909152016103b2565b6104556109ad3660046155eb565b6141fc565b6104556109c03660046151c1565b614296565b60006001600160e01b03198216635a05180f60e01b14806109ea57506109ea826143b0565b92915050565b6000610a0a600080516020615cd4833981519152336107ab565b610a2f5760405162461bcd60e51b8152600401610a26906158ac565b60405180910390fd5b60025460ff16610a515760405162461bcd60e51b8152600401610a26906157a0565b610a5b83836143e5565b9050673782dace9d9000008111158015610a7d5750670de0b6b3a76400008110155b610ac95760405162461bcd60e51b815260206004820152601f60248201527f50657263656e746167652073686f756c642062652066726f6d20312d342025006044820152606401610a26565b600a839055600b82905560408051848152602081018490527f4aed3beccf37ae9977a9fce4ed1771b1a6ee2f1c290134080bf2264d58f6e2ca91015b60405180910390a192915050565b6006546001600160a01b031663d505accf333088888888886040518863ffffffff1660e01b8152600401610b4d979695949392919061572c565b600060405180830381600087803b158015610b6757600080fd5b505af1158015610b7b573d6000803e3d6000fd5b50505050610b8886613646565b505050505050565b6000610baa600080516020615cd4833981519152336107ab565b610bc65760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16610be85760405162461bcd60e51b8152600401610a26906157a0565b610bf283836143e5565b9050673782dace9d9000008111158015610c145750670de0b6b3a76400008110155b610c605760405162461bcd60e51b815260206004820152601f60248201527f50657263656e746167652073686f756c642062652066726f6d20312d342025006044820152606401610a26565b6007839055600882905560408051848152602081018490527f0dba25723c12d14a525942a1f517d05faa831a99752d9e8273a56eb021106b7e9101610b05565b610cb8600080516020615cd4833981519152336107ab565b610cd45760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16610cf65760405162461bcd60e51b8152600401610a26906157a0565b60008111610d605760405162461bcd60e51b815260206004820152603160248201527f537461727446694d61726b6574706c6163654361703a20636170206d757374206044820152706265206d6f7265207468616e207a65726f60781b6064820152608401610a26565b600d55565b60025460ff1615610d885760405162461bcd60e51b8152600401610a2690615841565b8060008111610dd95760405162461bcd60e51b815260206004820152601960248201527f5a65726f2056616c7565206973206e6f7420616c6c6f776564000000000000006044820152606401610a26565b60168054906000610de983615c3c565b919050555060008484610df93390565b6016546040516bffffffffffffffffffffffff19606095861b8116602083015260348201949094529190931b9091166054820152426068820152608881019190915260a80160408051808303601f19018152908290528051602090910120601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440181905563020604bf60e21b825260048201869052915030906001600160a01b0387169063081812fc9060240160206040518083038186803b158015610ecd57600080fd5b505afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0591906151dd565b6001600160a01b03161480610fa257506001600160a01b03851663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b158015610f6a57600080fd5b505afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa291906154f3565b610fbe5760405162461bcd60e51b8152600401610a2690615981565b604051806101600160405280866001600160a01b03168152602001610fe03390565b6001600160a01b03168152600060208201819052604082018790526060820186905242608083015260a0820181905260c0820181905260e0820152610100016001815260200160019052600082815260136020908152604091829020835181546001600160a01b03199081166001600160a01b03928316178355928501516001808401805486169284169290921790915593850151600280840180549095169190921617909255606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e08401516007820155610100840151600882015561012084015160098201805492949193909260ff1916919084908111156110fb57634e487b7160e01b600052602160045260246000fd5b021790555061014082015160098201805461ff00191661010083600281111561113457634e487b7160e01b600052602160045260246000fd5b0217905550506040805183815233602082015280820186905242606082015290518692506001600160a01b038816917f49106c20b85d090f5e277321755f4aa52208129bcbc2940327186f7f7f1c031a919081900360800190a36001600160a01b0385166342842e0e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101879052606401600060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b505050505050505050565b61121582826143f1565b600082815260016020526040902061122d908261439b565b505050565b61123c8282614417565b600082815260016020526040902061122d9082614491565b61126c600080516020615cd4833981519152336107ab565b6112885760405162461bcd60e51b8152600401610a26906158ac565b60025460ff166112aa5760405162461bcd60e51b8152600401610a26906157a0565b426004556112b66144a6565b565b60006112c98c338d88888888614512565b6113095760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610a26565b6113188c8c8c8c8c8c8c6117be565b9c9b505050505050505050505050565b60005b825181101561122d5761136583828151811061135757634e487b7160e01b600052603260045260246000fd5b602002602001015183612c10565b8061136f81615c3c565b91505061132b565b61138f600080516020615cd4833981519152336107ab565b6113ab5760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16156113ce5760405162461bcd60e51b8152600401610a2690615841565b6001600160a01b038316600090815260116020526040902054156114255760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48195e1a5cda5d60921b6044820152606401610a26565b60408051808201825283815260208082018481526001600160a01b0387166000818152601184528590209351845590516001909301929092558251338152908101919091528082018490526060810183905290517ff5c7e6c2b8dc927897290afe37ff3c0df5d40c978875b7588c11d639f990b5499181900360800190a1505050565b60025460ff16156114cb5760405162461bcd60e51b8152600401610a2690615841565b600081815260136020526040902060098101546002820154600180840154845460039095015460ff8086169661010090960416946001600160a01b03948516949283169392169185600281111561153257634e487b7160e01b600052602160045260246000fd5b146115915760405162461bcd60e51b815260206004820152602960248201527f4974656d206973206e6f74206f6e2041756374696f6e206f72204c697374656460448201526820666f722073616c6560b81b6064820152608401610a26565b6001600160a01b03831633146115e35760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610a26565b6001600160a01b038416156116315760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c903137bab3b43a103a37b5b2b760611b6044820152606401610a26565b600186600281111561165357634e487b7160e01b600052602160045260246000fd5b146116cf5760008781526013602052604081206005015460035490919061167a9083615a6d565b9050428111156116cc5760405162461bcd60e51b815260206004820152601e60248201527f4e6f74207468652074696d6520746f2044656c6973742061756374696f6e00006044820152606401610a26565b50505b600087815260136020526040902060090180546002919061ff001916610100830217905550604080518881526001600160a01b038085166020830152851691810191909152606081018290524260808201527f6dc4b575e1450ba0ba61ffb69a8da69f79d671bee33a01783b6a14c469cb7e709060a00160405180910390a1604051632142170760e11b8152306004820152336024820152604481018290526001600160a01b038316906342842e0e906064015b600060405180830381600087803b15801561179d57600080fd5b505af11580156117b1573d6000803e3d6000fd5b5050505050505050505050565b60006117cc60025460ff1690565b156117e95760405162461bcd60e51b8152600401610a2690615841565b856000811161183a5760405162461bcd60e51b815260206004820152601960248201527f5a65726f2056616c7565206973206e6f7420616c6c6f776564000000000000006044820152606401610a26565b6000851561189a57878510156118925760405162461bcd60e51b815260206004820152601960248201527f5a65726f207072696365206973206e6f7420616c6c6f776564000000000000006044820152606401610a26565b5060026118a1565b5060009350835b61a8c084116119085760405162461bcd60e51b815260206004820152602d60248201527f41756374696f6e2073686f756c64206265206c69766520666f72206d6f72652060448201526c7468616e20313220686f75727360981b6064820152608401610a26565b600f5487101561195a5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642041756374696f6e207175616c69667920416d6f756e7400006044820152606401610a26565b60006119668542615a6d565b60168054919250600061197883615c3c565b91905055508a8a6119863390565b6016546040516bffffffffffffffffffffffff19606095861b8116602083015260348201949094529190931b909116605482015260688101839052608881019190915260a80160408051808303601f19018152908290528051602090910120601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440181905563020604bf60e21b8252600482018c9052945030906001600160a01b038d169063081812fc9060240160206040518083038186803b158015611a5b57600080fd5b505afa158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9391906151dd565b6001600160a01b03161480611b3057506001600160a01b038b1663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b158015611af857600080fd5b505afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906154f3565b611b4c5760405162461bcd60e51b8152600401610a2690615981565b6040518061016001604052808c6001600160a01b03168152602001611b6e3390565b6001600160a01b0316815260200160006001600160a01b031681526020018b815260200187815260200182815260200160035483611bac9190615a6d565b81526020018981526020018a8152602001836002811115611bdd57634e487b7160e01b600052602160045260246000fd5b815260200160019052600085815260136020908152604091829020835181546001600160a01b03199081166001600160a01b03928316178355928501516001808401805486169284169290921790915593850151600280840180549095169190921617909255606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e08401516007820155610100840151600882015561012084015160098201805492949193909260ff191691908490811115611cb757634e487b7160e01b600052602160045260246000fd5b021790555061014082015160098201805461ff001916610100836002811115611cf057634e487b7160e01b600052602160045260246000fd5b02179055505060408051868152336020820152808201899052606081018c90526080810184905260a081018b90524260c082015290518c92506001600160a01b038e16917f65899c700e34c95deda58c22101038a1b7736227061b7659da815d75a88a8d5b919081900360e00190a36001600160a01b038b166342842e0e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018d9052606401600060405180830381600087803b158015611dbd57600080fd5b505af1158015611dd1573d6000803e3d6000fd5b50505050505050979650505050505050565b806001600160a01b038116611e3a5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2061646472657373206973206e6f7420616c6c6f77656400000000006044820152606401610a26565b611e456000336107ab565b611e805760405162461bcd60e51b815260206004820152600c60248201526b155b905d5d1a1bdc9a5e995960a21b6044820152606401610a26565b6002805474ffffffffffffffffffffffffffffffffffffffff0019166101006001600160a01b03851602179055611eb86000836145c2565b6040516001600160a01b03831681527f07725cf1e627ba6b8a0d3bde9462e150e033b44fa6f17a31024d141122c1396f906020015b60405180910390a15050565b60025460ff16611f1b5760405162461bcd60e51b8152600401610a26906157a0565b60008181526013602052604090206009810154600282015460018301548354600585015460039095015461010090940460ff16946001600160a01b03938416949284169390911691338414611fac5760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610a26565b6001600160a01b03851615611ffa5760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c903137bab3b43a103a37b5b2b760611b6044820152606401610a26565b600186600281111561201c57634e487b7160e01b600052602160045260246000fd5b146120695760405162461bcd60e51b815260206004820181905260248201527f416c726561647920626f75676874206f722063616e63656c656420746f6b656e6044820152606401610a26565b60008781526013602090815260409182902060098101805461ff0019166102001790556007015482518a81526001600160a01b03878116938201939093529187168284015260608201849052608082015260a081018490524260c082015290517f60974777054aa4309a55a645d5dab87017a79bbad06dac2fda24be4d8e3b49969181900360e00190a1604051632142170760e11b81523060048201526001600160a01b038581166024830152604482018390528416906342842e0e90606401611783565b60006109ea826145cc565b6000818152601360205260408120805460018201546002808401546003850154600486015460058701546006880154600789015460088a01546009909a01546001600160a01b03998a169b988a169a9690991698949793969295919490939192829160ff61010090910416908111156121c257634e487b7160e01b600052602160045260246000fd5b60008d81526013602052604090206009015490915060ff1660028111156121f957634e487b7160e01b600052602160045260246000fd5b915091939597999b90929496989a50565b612222600080516020615cd4833981519152336107ab565b61223e5760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16156122615760405162461bcd60e51b8152600401610a2690615841565b6112b661466c565b60606005805461227890615c01565b80601f01602080910402602001604051908101604052809291908181526020018280546122a490615c01565b80156122f15780601f106122c6576101008083540402835291602001916122f1565b820191906000526020600020905b8154815290600101906020018083116122d457829003601f168201915b5050505050905090565b600082815260016020526040812061231390836146c4565b9392505050565b612332600080516020615cd4833981519152336107ab565b61234e5760405162461bcd60e51b8152600401610a26906158ac565b60025460ff166123705760405162461bcd60e51b8152600401610a26906157a0565b80516123839060059060208401906150b4565b507fe28169ccda724be8baad801e6de41dad86e49186953944c40f68eb91e100ea86816040516123b3919061576d565b60405180910390a150565b6123e87f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f7336107ab565b6124345760405162461bcd60e51b815260206004820181905260248201527f537461727446694d61726b6574506c6163653a20556e417574686f72697a65646044820152606401610a26565b600f819055600d546124469082615b84565b600e5550565b60025460ff161561246f5760405162461bcd60e51b8152600401610a2690615841565b600081815260136020526040902060050154421180156124c35750600160008281526013602052604090206009015460ff1660028111156124c057634e487b7160e01b600052602160045260246000fd5b14155b6125245760405162461bcd60e51b815260206004820152602c60248201527f41756374696f6e206973206e6f7420656e646564206f72206e6f206c6f6e676560448201526b391037b71030bab1ba34b7b760a11b6064820152608401610a26565b60008181526015602090815260408083206001908101546013808552838620808401548154600383015460148952878a206001600160a01b03968716808c52908a52978a2090960154988a905292909652600701549395948216949116923386146125d15760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74207468652077696e6e657200000000000000006044820152606401610a26565b600e548211156126095760008781526010602052604090205460ff166126095760405162461bcd60e51b8152600401610a26906159d2565b600654604051636eb1769f60e11b81526001600160a01b0388811660048301523060248301528492169063dd62ed3e9060440160206040518083038186803b15801561265457600080fd5b505afa158015612668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268c919061569f565b10156126aa5760405162461bcd60e51b8152600401610a26906157d7565b6126e56040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b602081018490526001600160a01b038516815260408101839052612708866146d0565b60808301526060820152600061271d82614722565b60008a81526014602090815260408083206001600160a01b038d168085529083528184206002908101805461ffff191660011790558e85526013845282852060098101805461ff00191690550180546001600160a01b031916821790558352600c909152812080549293508592909190612798908490615ba3565b92505081905550887f770608f9b23b449846d60bf6a9fd216b33db427cd5726cf1071d134311431442601560008c815260200190815260200160002060000154888b89898760000151886020015189604001518a606001514260405161285a9a99989796959493929190998a526001600160a01b0398891660208b015296881660408a015260608901959095526080880193909352941660a086015260c085019390935260e08401929092526101008301919091526101208201526101400190565b60405180910390a26006546001600160a01b03166323b872dd33600254604085810151905160e085901b6001600160e01b03191681526001600160a01b03938416600482015261010090920490921660248201526044810191909152606401602060405180830381600087803b1580156128d357600080fd5b505af11580156128e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290b91906154f3565b6129575760405162461bcd60e51b815260206004820152601f60248201527f436f756c646e2774207472616e7366657220746f6b656e2061732066656573006044820152606401610a26565b866001600160a01b031681600001516001600160a01b031614156129935780602001518160600181815161298b9190615a6d565b905250612a70565b80516001600160a01b0316158015906129af5750602081015115155b15612a70576006546001600160a01b03166323b872dd338351602085015160405160e085901b6001600160e01b03191681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015612a1c57600080fd5b505af1158015612a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5491906154f3565b612a705760405162461bcd60e51b8152600401610a269061586b565b6006546001600160a01b03166323b872dd3360608401516040516001600160e01b031960e085901b1681526001600160a01b039283166004820152918b1660248301526044820152606401602060405180830381600087803b158015612ad557600080fd5b505af1158015612ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0d91906154f3565b612b295760405162461bcd60e51b8152600401610a26906158e3565b6001600160a01b0386166342842e0e30335b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101889052606401600060405180830381600087803b158015612b8a57600080fd5b505af1158015612b9e573d6000803e3d6000fd5b50505050505050505050505050565b612bbc87338887878787614512565b612bfc5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610a26565b612c07878787610d65565b50505050505050565b60008281526014602090815260408083206001600160a01b0385168452909152902060010154612c965760405162461bcd60e51b815260206004820152602b60248201527f426964646572206973206e6f742070617274696369706174696e6720696e207460448201526a3434b99030bab1ba34b7b760a91b6064820152608401610a26565b60008281526014602090815260408083206001600160a01b0385168452909152902060020154610100900460ff16612d035760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995b19585cd95960821b6044820152606401610a26565b6000828152601360205260409020600501544211612d765760405162461bcd60e51b815260206004820152602a60248201527f43616e206e6f742072656c65617365207374616b657320666f722072756e6e6960448201526937339030bab1ba34b7b760b11b6064820152608401610a26565b6000828152601560205260409020600101546001600160a01b0382811691161415612e135760405162461bcd60e51b815260206004820152604160248201527f57696e6e6572206269646465722063616e20206f6e6c79202072656c6561736560448201527f207374616b65732062792066756c66696c6c696e67207468652061756374696f6064820152603760f91b608482015260a401610a26565b612e1d82826147fd565b5050565b612e39600080516020615cd4833981519152336107ab565b612e555760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16612e775760405162461bcd60e51b8152600401610a26906157a0565b620151808111612e8657600080fd5b60038190556040518181527ff49a73cf36f0d199722739f91a682c327b1e2d3fde466a159e78e0ea0dbbacf8906020016123b3565b60008181526001602052604081206109ea906148c7565b60025460ff1615612ef55760405162461bcd60e51b8152600401610a2690615841565b60008281526013602052604090206005015442108015612f4d57506001600083815260136020526040902060090154610100900460ff166002811115612f4b57634e487b7160e01b600052602160045260246000fd5b145b8015612f8d5750600160008381526013602052604090206009015460ff166002811115612f8a57634e487b7160e01b600052602160045260246000fd5b14155b612fcc5760405162461bcd60e51b815260206004820152601060248201526f105d58dd1a5bdb881a5cc8195b99195960821b6044820152606401610a26565b6000828152601560205260409020600101546001600160a01b031680613078576000838152601360205260409020600801548210156130735760405162461bcd60e51b815260206004820152603660248201527f626964207072696365206d757374206265206d6f7265207468616e206f72206560448201527f7175616c20746865206d696e696d756d207072696365000000000000000000006064820152608401610a26565b6130fd565b60008381526014602090815260408083206001600160a01b038516845290915290206001015482116130fd5760405162461bcd60e51b815260206004820152602860248201527f626964207072696365206d757374206265206d6f7265207468616e20746865206044820152671b185cdd08189a5960c21b6064820152608401610a26565b6000838152601460209081526040808320338452909152812060020154610100900460ff1661323e575060008381526013602081815260408084208054600382015483518086018b90526bffffffffffffffffffffffff19606093841b811682870152339384901b1660548201526068808201929092528451808203909201825260880190935282519284019290922094889052929091526007909101549081906131a7906145cc565b10156131eb5760405162461bcd60e51b81526020600482015260136024820152724e6f7420656e6f75676820726573657276657360681b6044820152606401610a26565b336000908152600c60205260408120805483929061320a908490615a6d565b90915550505060008481526014602090815260408083203384529091529020600201805461ff001916610100179055613263565b5060008381526014602090815260408083206001600160a01b03851684529091529020545b604051806040016040528082815260200161327b3390565b6001600160a01b0390811690915260008681526015602090815260408083208551815594820151600195860180546001600160a01b03191691909516179093558251608081018452858152808201888152818501848152606083018781528b86526014855286862033808852955295909420915182555194810194909455905160029093018054925115156101000261ff00199415159490941661ffff199093169290921792909217905584907fa43ab005b7a0aa4220e1af7738a3d9d19267c3b522daa2f7c7ba4659d48d89ca908390604080519283526001600160a01b039091166020830152810186905242606082015260800160405180910390a250505050565b613397600080516020615cd4833981519152336107ab565b6133b35760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16156133d65760405162461bcd60e51b8152600401610a2690615841565b6001600083815260136020526040902060090154610100900460ff16600281111561341157634e487b7160e01b600052602160045260246000fd5b1461345e5760405162461bcd60e51b815260206004820181905260248201527f537461727446694d61726b6574706c6163653a20496e76616c6964206974656d6044820152606401610a26565b80156134f657600160008381526013602052604090206009015460ff16600281111561349a57634e487b7160e01b600052602160045260246000fd5b146134d8576000828152601360205260409020600501544211156134d8576003546134c59042615a6d565b6000838152601360205260409020600601555b6000828152601060205260409020805460ff191660011790556135f5565b60008281526013602081815260408084206001808201546010855292909520805460ff19169055929091526009909101805461020061ff00198216179091556001600160a01b03909116919060ff16600281111561356457634e487b7160e01b600052602160045260246000fd5b146135735761357383826147fd565b6000838152601360205260409081902080546003909101549151632142170760e11b81523060048201526001600160a01b03848116602483015260448201939093529116906342842e0e90606401600060405180830381600087803b1580156135db57600080fd5b505af11580156135ef573d6000803e3d6000fd5b50505050505b6040805133815282151560208201524281830152905183917f48b5e4e1991033d8c319ccd4a32a2be182193c79acb3dbb1780c51d1a7fbc635919081900360600190a25050565b61123c82826148d1565b60025460ff16156136695760405162461bcd60e51b8152600401610a2690615841565b6000818152601360205260409020600981015460048201546003830154600180850154945460ff61010086048116969516946001600160a01b03908116929116908660028111156136ca57634e487b7160e01b600052602160045260246000fd5b1480156136f7575060008560028111156136f457634e487b7160e01b600052602160045260246000fd5b14155b61373a5760405162461bcd60e51b81526020600482015260146024820152734974656d206973206e6f7420666f722073616c6560601b6044820152606401610a26565b600285600281111561375c57634e487b7160e01b600052602160045260246000fd5b14156137b95760008781526013602052604090206005015442106137b95760405162461bcd60e51b81526020600482015260146024820152734974656d206973206e6f7420666f722073616c6560601b6044820152606401610a26565b600e548411156137f15760008781526010602052604090205460ff166137f15760405162461bcd60e51b8152600401610a26906159d2565b60065484906001600160a01b031663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b15801561384a57600080fd5b505afa15801561385e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613882919061569f565b10156138a05760405162461bcd60e51b8152600401610a26906157d7565b6138db6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b602081018490526001600160a01b0382168152604081018590526138fe836146d0565b60808301526060820152600061391382614722565b60008a81526013602090815260409182902060098101805461ff001916905560020180546001600160a01b031916339081179091558351848301518585015160608088015187516001600160a01b038d81168252978101969096528c8716868901529085018d9052608085018e90529490921660a084015260c083015260e08201526101008101919091524261012082015290519192508a917fc97bbff05b26896fa1898eff8bcf3414f69bfa3c156d78a49344d5cfbf5e2c8c918190036101400190a26006546001600160a01b03166323b872dd33600254604085810151905160e085901b6001600160e01b03191681526001600160a01b03938416600482015261010090920490921660248201526044810191909152606401602060405180830381600087803b158015613a4857600080fd5b505af1158015613a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8091906154f3565b613acc5760405162461bcd60e51b815260206004820152601f60248201527f436f756c646e2774207472616e7366657220746f6b656e2061732066656573006044820152606401610a26565b836001600160a01b031681600001516001600160a01b03161415613b0857806020015181606001818151613b009190615a6d565b905250613be5565b80516001600160a01b031615801590613b245750602081015115155b15613be5576006546001600160a01b03166323b872dd338351602085015160405160e085901b6001600160e01b03191681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015613b9157600080fd5b505af1158015613ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc991906154f3565b613be55760405162461bcd60e51b8152600401610a269061586b565b6006546001600160a01b03166323b872dd3360608401516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291881660248301526044820152606401602060405180830381600087803b158015613c4a57600080fd5b505af1158015613c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8291906154f3565b613c9e5760405162461bcd60e51b8152600401610a26906158e3565b6001600160a01b0383166342842e0e3033612b3b565b60128181548110613cc457600080fd5b600091825260209091200154905081565b600080613ce460025460ff1690565b15613d015760405162461bcd60e51b8152600401610a2690615841565b50506000818152601560209081526040808320600190810154601390935292209182015482546009840154600385015460078601546006909601546001600160a01b039384169691958416949093169260ff90921691613d5e3390565b6001600160a01b0316846001600160a01b031614613dbe5760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792053656c6c65722063616e20646973707574650000000000000000006044820152606401610a26565b6001600089815260136020526040902060090154610100900460ff166002811115613df957634e487b7160e01b600052602160045260246000fd5b148015613e2657506001836002811115613e2357634e487b7160e01b600052602160045260246000fd5b14155b613e7e5760405162461bcd60e51b815260206004820152602360248201527f4d61726b6574706c6163653a204974656d206973206e6f74206f6e204175637460448201526234b7b760e91b6064820152608401610a26565b6001600160a01b038516613ed45760405162461bcd60e51b815260206004820181905260248201527f4d61726b6574706c6163653a2041756374696f6e20686173206e6f20626964736044820152606401610a26565b42811115613f355760405162461bcd60e51b815260206004820152602860248201527f4d61726b6574706c6163653a2043616e206e6f742064697370757465206265666044820152676f72652074696d6560c01b6064820152608401610a26565b42600354600454613f469190615a6d565b10613fc75760405162461bcd60e51b8152602060048201526044602482018190527f436f6e747261637420686173206a757374656420756e7061757365642c20706c908201527f65617365206769766520746865206269646465722074696d6520746f2066756c606482015263199a5b1b60e21b608482015260a401610a26565b600e5460008981526014602090815260408083206001600160a01b038a16845290915290206001015411156140245760008881526010602052604090205460ff166140245760405162461bcd60e51b8152600401610a26906159d2565b600080614030846148f7565b9150915061405487600260019054906101000a90046001600160a01b03168461491f565b6140705760405162461bcd60e51b8152600401610a2690615924565b61407b87878361491f565b6140975760405162461bcd60e51b8152600401610a2690615924565b60008a81526014602090815260408083206001600160a01b038b1684528252808320600201805461ff0019169055600c909152812080548692906140dc908490615ba3565b909155505060008a8152601360209081526040808320600901805461ff00191661020017905560158252918290205482519081526001600160a01b038c81169282019290925289821681840152606081018b9052908816608082015260a0810186905260c0810183905260e081018490524261010082015290518b917fb46a91724b95c8764d64242653194717e2ab549e1b76e207124d3bddc39aed6d91908190036101200190a260408051632142170760e11b8152306004820152336024820152604481018a905290516001600160a01b038b16916342842e0e91606480830192600092919082900301818387803b1580156141d857600080fd5b505af11580156141ec573d6000803e3d6000fd5b5050505050505050505050915091565b60065460008681526014602090815260408083203380855292529182902060010154915163d505accf60e01b81526001600160a01b039093169263d505accf9261425492913091908a908a908a908a9060040161572c565b600060405180830381600087803b15801561426e57600080fd5b505af1158015614282573d6000803e3d6000fd5b5050505061428f8561244c565b5050505050565b806001600160a01b0381166142ed5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2061646472657373206973206e6f7420616c6c6f77656400000000006044820152606401610a26565b614305600080516020615cd4833981519152336107ab565b6143215760405162461bcd60e51b8152600401610a26906158ac565b60025460ff166143435760405162461bcd60e51b8152600401610a26906157a0565b600680546001600160a01b0319166001600160a01b0384169081179091556040519081527f34ebd4cf402719b97a4e51402bd4a109c70b0b732ce4ead80c769d9d2a427ac090602001611eed565b612e1d82826149b6565b6000612313836001600160a01b038416614a3a565b60006001600160e01b03198216637965db0b60e01b14806109ea57506301ffc9a760e01b6001600160e01b03198316146109ea565b60006123138383614a89565b60008281526020819052604090206001015461440d8133614aa1565b61122d83836149b6565b6001600160a01b03811633146144875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a26565b612e1d8282614b05565b6000612313836001600160a01b038416614b6a565b60025460ff166144c85760405162461bcd60e51b8152600401610a26906157a0565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061451d88614c87565b156145b35760405163d505accf60e01b81526001600160a01b0389169063d505accf9061455a908a9030908b908b908b908b908b9060040161572c565b602060405180830381600087803b15801561457457600080fd5b505af1158015614588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ac91906154f3565b90506145b7565b5060005b979650505050505050565b6112158282614391565b6001600160a01b038181166000818152600c6020526040808220546009549151630fa6707960e21b815260048101949094529193919283929190911690633e99c1e49060240160206040518083038186803b15801561462a57600080fd5b505afa15801561463e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614662919061569f565b6123139190615ba3565b60025460ff161561468f5760405162461bcd60e51b8152600401610a2690615841565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586144f53390565b60006123138383614d0d565b6001600160a01b0381166000908152601160205260408120548190156147155750506001600160a01b0316600090815260116020526040902080546001909101549091565b5050600754600854915091565b614756604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b61476d826040015183606001518460800151614d45565b60408083018290528301516147829190615ba3565b6060820152815161479290614d66565b156147f8576147ae826000015183602001518460400151614d9c565b602083018190526001600160a01b039091168252158015906147d9575080516001600160a01b031615155b156147f857806020015181606001516147f29190615ba3565b60608201525b919050565b6001600160a01b0381166000818152600c602081815260408084208054888652601384529185206007015495855292909152929182919061483e8386615ba3565b909155505060008481526014602090815260408083206001600160a01b038716808552908352818420600201805461ff0019169055600c8352928190205481519384529183018590528201819052426060830152907f818521a1b12d29402a8e33bac65a0263cfcadaca4429aa2c3831eb4cc2c3d2979060800160405180910390a15050505050565b60006109ea825490565b6000828152602081905260409020600101546148ed8133614aa1565b61122d8383614b05565b60008061490c83671bc16d674ec80000614a89565b91506149188284615ba3565b9050915091565b60095460405163929c517960e01b81526001600160a01b038581166004830152848116602483015260448201849052600092169063929c517990606401602060405180830381600087803b15801561497657600080fd5b505af115801561498a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ae91906154f3565b949350505050565b6149c082826107ab565b612e1d576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556149f63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054614a81575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109ea565b5060006109ea565b60006123138383614a9c6012600a615adc565b614e2b565b614aab82826107ab565b612e1d57614ac3816001600160a01b03166014614e84565b614ace836020614e84565b604051602001614adf9291906156b7565b60408051601f198184030181529082905262461bcd60e51b8252610a269160040161576d565b614b0f82826107ab565b15612e1d576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015614c7d576000614b8e600183615ba3565b8554909150600090614ba290600190615ba3565b9050818114614c23576000866000018281548110614bd057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110614c0157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614c4257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109ea565b60009150506109ea565b6040516301ffc9a760e01b815263152a902d60e11b60048201526000906001600160a01b038316906301ffc9a7906024015b60206040518083038186803b158015614cd157600080fd5b505afa925050508015614d01575060408051601f3d908101601f19168201909252614cfe918101906154f3565b60015b6109ea57506000919050565b6000826000018281548110614d3257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006149ae614d5f614d58846064615b84565b8590615066565b8590615089565b6040516301ffc9a760e01b815263152a902d60e11b60048201526000906001600160a01b038316906301ffc9a790602401614cb9565b60405163152a902d60e11b8152600481018390526024810182905260009081906001600160a01b03861690632a55205a90604401604080518083038186803b158015614de757600080fd5b505afa158015614dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e1f9190615276565b90969095509350505050565b60008083614e3a84600a615b84565b614e449087615b84565b614e4e9190615a85565b90506005614e5d600a83615c57565b10614e7057614e6d600a82615a6d565b90505b614e7b600a82615a85565b95945050505050565b60606000614e93836002615b84565b614e9e906002615a6d565b67ffffffffffffffff811115614ec457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614eee576020820181803683370190505b509050600360fc1b81600081518110614f1757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614f5457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000614f78846002615b84565b614f83906001615a6d565b90505b6001811115615017576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614fc557634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110614fe957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361501081615bea565b9050614f86565b5083156123135760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a26565b6000816150756012600a615adc565b61507f9085615b84565b6123139190615a85565b6000612313838361509c6012600a615adc565b6000806150aa600a84615a85565b614e448587615b84565b8280546150c090615c01565b90600052602060002090601f0160209004810192826150e25760008555615128565b82601f106150fb57805160ff1916838001178555615128565b82800160010185558215615128579182015b8281111561512857825182559160200191906001019061510d565b50615134929150615138565b5090565b5b808211156151345760008155600101615139565b600067ffffffffffffffff83111561516757615167615c97565b61517a601f8401601f1916602001615a3c565b905082815283838301111561518e57600080fd5b828260208301376000602084830101529392505050565b80356147f881615cad565b803560ff811681146147f857600080fd5b6000602082840312156151d2578081fd5b813561231381615cad565b6000602082840312156151ee578081fd5b815161231381615cad565b6000806000806080858703121561520e578283fd5b843561521981615cad565b9350602085013561522981615cad565b925060408501359150606085013567ffffffffffffffff81111561524b578182fd5b8501601f8101871361525b578182fd5b61526a8782356020840161514d565b91505092959194509250565b60008060408385031215615288578182fd5b825161529381615cad565b6020939093015192949293505050565b6000806000606084860312156152b7578283fd5b83356152c281615cad565b95602085013595506040909401359392505050565b600080600080600080600060e0888a0312156152f1578283fd5b87356152fc81615cad565b9650602088013595506040880135945060608801359350608088013561532181615cc5565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060008060008060006101608c8e03121561535f578384fd5b8b3561536a81615cad565b9a5060208c0135995060408c0135985060608c0135975060808c013561538f81615cc5565b965060a08c0135955060c08c0135945060e08c013593506153b36101008d016151b0565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600080600080600080600060e0888a0312156153ef578081fd5b87356153fa81615cad565b965060208801359550604088013594506060880135935061541d608089016151b0565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561544b578182fd5b823567ffffffffffffffff80821115615462578384fd5b818501915085601f830112615475578384fd5b813560208282111561548957615489615c97565b8160051b925061549a818401615a3c565b8281528181019085830185870184018b10156154b4578889fd5b8896505b848710156154d65780358352600196909601959183019183016154b8565b5096506154e690508782016151a5565b9450505050509250929050565b600060208284031215615504578081fd5b815161231381615cc5565b600060208284031215615520578081fd5b5035919050565b60008060408385031215615539578182fd5b82359150602083013561554b81615cad565b809150509250929050565b60008060408385031215615568578182fd5b82359150602083013561554b81615cc5565b6000806040838503121561558c578182fd5b50508035926020909101359150565b60008060008060008060c087890312156155b3578384fd5b8635955060208701359450604087013593506155d1606088016151b0565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215615602578283fd5b8535945060208601359350615619604087016151b0565b94979396509394606081013594506080013592915050565b600060208284031215615642578081fd5b81356001600160e01b031981168114612313578182fd5b60006020828403121561566a578081fd5b813567ffffffffffffffff811115615680578182fd5b8201601f81018413615690578182fd5b6149ae8482356020840161514d565b6000602082840312156156b0578081fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516156ef816017850160208801615bba565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615720816028840160208801615bba565b01602801949350505050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b602081526000825180602084015261578c816040850160208701615bba565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526044908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20776960408201527f7468647261772074686520726571756972656420616d6f756e74206f6620746f6060820152636b656e7360e01b608082015260a00190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2069737375656040820152603960f91b606082015260800190565b60208082526017908201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2073656c6c656040820152603960f91b606082015260800190565b6020808252603a908201527f4d61726b6574706c6163653a20636f756c646e2774206465647563742074686560408201527f2066696e6520666f72207468652061646d696e2077616c6c6574000000000000606082015260800190565b60208082526031908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20747260408201527030b739b332b9103cb7bab9103a37b5b2b760791b606082015260800190565b60208082526044908201527f537461727466694d61726b6574706c6163653a2050726963652065786365656460408201527f656420746865206361702e20596f75206e65656420746f2067657420617070726060820152631bdd995960e21b608082015260a00190565b604051601f8201601f1916810167ffffffffffffffff81118282101715615a6557615a65615c97565b604052919050565b60008219821115615a8057615a80615c6b565b500190565b600082615a9457615a94615c81565b500490565b600181815b80851115615ad4578160001904821115615aba57615aba615c6b565b80851615615ac757918102915b93841c9390800290615a9e565b509250929050565b60006123138383600082615af2575060016109ea565b81615aff575060006109ea565b8160018114615b155760028114615b1f57615b3b565b60019150506109ea565b60ff841115615b3057615b30615c6b565b50506001821b6109ea565b5060208310610133831016604e8410600b8410161715615b5e575081810a6109ea565b615b688383615a99565b8060001904821115615b7c57615b7c615c6b565b029392505050565b6000816000190483118215151615615b9e57615b9e615c6b565b500290565b600082821015615bb557615bb5615c6b565b500390565b60005b83811015615bd5578181015183820152602001615bbd565b83811115615be4576000848401525b50505050565b600081615bf957615bf9615c6b565b506000190190565b600181811c90821680615c1557607f821691505b60208210811415615c3657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615c5057615c50615c6b565b5060010190565b600082615c6657615c66615c81565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114615cc257600080fd5b50565b8015158114615cc257600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220e16c9fdf58e3d57531c8ac25a0483909dab2d2685d4ee8c63970cb8f3c250c8864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038e5760003560e01c806369abe662116101de578063b3331bee1161010f578063d7ad4931116100ad578063e58378bb1161007c578063e58378bb14610944578063eb75c41014610959578063ec77bb8c1461099f578063ffd856ad146109b257600080fd5b8063d7ad493114610874578063de74e57b14610887578063e123ff581461089a578063e1a1d7ed146108cc57600080fd5b8063ca15c873116100e9578063ca15c87314610828578063cd772f5c1461083b578063d482ad9e1461084e578063d547741f1461086157600080fd5b8063b3331bee146107ef578063b381065b14610802578063c82f26011461081557600080fd5b80638ef291e91161017c57806391b7f5ed1161015657806391b7f5ed1461078a57806391d148541461079d578063a01a93b3146107d4578063a217fddf146107e757600080fd5b80638ef291e91461074f5780639010d07c14610764578063913d7ee21461077757600080fd5b80637b356561116101b85780637b356561146106a0578063805596a01461071757806383ed8063146107205780638456cb591461074757600080fd5b806369abe662146106615780636c2c9c7d146106845780637a59acd21461068d57600080fd5b80633a33ae80116102c357806356e9d1f3116102615780635eec0870116102305780635eec08701461062a578063611d45a21461063d5780636298c93a14610650578063649ee6831461065857600080fd5b806356e9d1f3146105f15780635add4b11146106045780635bbd49f41461060c5780635c975abb1461061f57600080fd5b80634b046d9b1161029d5780634b046d9b1461052e5780634b3ee2bb1461054157806356461e8e146105d557806356abf8d0146105de57600080fd5b80633a33ae801461050b5780633f4ba83a14610513578063421415cc1461051b57600080fd5b806321ecff5b1161033057806329c5cdf31161030a57806329c5cdf3146104c95780632a6bf14c146104dc5780632f2ff15d146104e557806336568abe146104f857600080fd5b806321ecff5b14610480578063248a9ca31461049357806329194964146104b657600080fd5b80631a1862271161036c5780631a186227146104045780631d9845231461042f5780631dee8488146104425780631f78fd0b1461045757600080fd5b806301ffc9a71461039357806311a1933c146103bb578063150b7a02146103cd575b600080fd5b6103a66103a1366004615631565b6109c5565b60405190151581526020015b60405180910390f35b6007545b6040519081526020016103b2565b6103eb6103db3660046151f9565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016103b2565b600954610417906001600160a01b031681565b6040516001600160a01b0390911681526020016103b2565b6103bf61043d36600461557a565b6109f0565b61045561045036600461559b565b610b13565b005b6103bf6104653660046151c1565b6001600160a01b03166000908152600c602052604090205490565b6103bf61048e36600461557a565b610b90565b6103bf6104a136600461550f565b60009081526020819052604090206001015490565b6104556104c436600461550f565b610ca0565b6104556104d73660046152a3565b610d65565b6103bf60035481565b6104556104f3366004615527565b61120b565b610455610506366004615527565b611232565b600e546103bf565b610455611254565b6103bf61052936600461533e565b6112b8565b61045561053c366004615439565b611328565b6105a161054f36600461550f565b60009081526015602090815260408083208054600191820154601485528386206001600160a01b0390911680875294529190932092830154600290930154909391929160ff8083169261010090041690565b604080519586526001600160a01b03909416602086015292840191909152151560608301521515608082015260a0016103b2565b6103bf600b5481565b6104556105ec3660046152a3565b611377565b6104556105ff36600461550f565b6114a8565b600f546103bf565b6103bf61061a3660046152d7565b6117be565b60025460ff166103a6565b6104556106383660046151c1565b611de3565b61045561064b36600461550f565b611ef9565b600d546103bf565b6103bf600a5481565b6103a661066f36600461550f565b60009081526010602052604090205460ff1690565b6103bf60165481565b6103bf61069b3660046151c1565b61212e565b6106b36106ae36600461550f565b612139565b604080516001600160a01b039c8d1681529a8c1660208c015298909a16978901979097526060880195909552608087019390935260a086019190915260c085015260e0840152610100830152610120820152610140810191909152610160016103b2565b6103bf60045481565b6103bf7f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f781565b61045561220a565b610757612269565b6040516103b2919061576d565b61041761077236600461557a565b6122fb565b610455610785366004615659565b61231a565b61045561079836600461550f565b6123be565b6103a66107ab366004615527565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6104556107e236600461550f565b61244c565b6103bf600081565b6104556107fd3660046153d5565b612bad565b610455610810366004615527565b612c10565b61045561082336600461550f565b612e21565b6103bf61083636600461550f565b612ebb565b61045561084936600461557a565b612ed2565b61045561085c366004615556565b61337f565b61045561086f366004615527565b61363c565b61045561088236600461550f565b613646565b6103bf61089536600461550f565b613cb4565b6108ad6108a836600461550f565b613cd5565b604080516001600160a01b0390931683526020830191909152016103b2565b61091c6108da366004615527565b60009182526014602090815260408084206001600160a01b03939093168452919052902080546001820154600290920154909260ff8083169261010090041690565b60408051948552602085019390935290151591830191909152151560608201526080016103b2565b6103bf600080516020615cd483398151915281565b61098a6109673660046151c1565b6001600160a01b0316600090815260116020526040902080546001909101549091565b604080519283526020830191909152016103b2565b6104556109ad3660046155eb565b6141fc565b6104556109c03660046151c1565b614296565b60006001600160e01b03198216635a05180f60e01b14806109ea57506109ea826143b0565b92915050565b6000610a0a600080516020615cd4833981519152336107ab565b610a2f5760405162461bcd60e51b8152600401610a26906158ac565b60405180910390fd5b60025460ff16610a515760405162461bcd60e51b8152600401610a26906157a0565b610a5b83836143e5565b9050673782dace9d9000008111158015610a7d5750670de0b6b3a76400008110155b610ac95760405162461bcd60e51b815260206004820152601f60248201527f50657263656e746167652073686f756c642062652066726f6d20312d342025006044820152606401610a26565b600a839055600b82905560408051848152602081018490527f4aed3beccf37ae9977a9fce4ed1771b1a6ee2f1c290134080bf2264d58f6e2ca91015b60405180910390a192915050565b6006546001600160a01b031663d505accf333088888888886040518863ffffffff1660e01b8152600401610b4d979695949392919061572c565b600060405180830381600087803b158015610b6757600080fd5b505af1158015610b7b573d6000803e3d6000fd5b50505050610b8886613646565b505050505050565b6000610baa600080516020615cd4833981519152336107ab565b610bc65760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16610be85760405162461bcd60e51b8152600401610a26906157a0565b610bf283836143e5565b9050673782dace9d9000008111158015610c145750670de0b6b3a76400008110155b610c605760405162461bcd60e51b815260206004820152601f60248201527f50657263656e746167652073686f756c642062652066726f6d20312d342025006044820152606401610a26565b6007839055600882905560408051848152602081018490527f0dba25723c12d14a525942a1f517d05faa831a99752d9e8273a56eb021106b7e9101610b05565b610cb8600080516020615cd4833981519152336107ab565b610cd45760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16610cf65760405162461bcd60e51b8152600401610a26906157a0565b60008111610d605760405162461bcd60e51b815260206004820152603160248201527f537461727446694d61726b6574706c6163654361703a20636170206d757374206044820152706265206d6f7265207468616e207a65726f60781b6064820152608401610a26565b600d55565b60025460ff1615610d885760405162461bcd60e51b8152600401610a2690615841565b8060008111610dd95760405162461bcd60e51b815260206004820152601960248201527f5a65726f2056616c7565206973206e6f7420616c6c6f776564000000000000006044820152606401610a26565b60168054906000610de983615c3c565b919050555060008484610df93390565b6016546040516bffffffffffffffffffffffff19606095861b8116602083015260348201949094529190931b9091166054820152426068820152608881019190915260a80160408051808303601f19018152908290528051602090910120601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440181905563020604bf60e21b825260048201869052915030906001600160a01b0387169063081812fc9060240160206040518083038186803b158015610ecd57600080fd5b505afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0591906151dd565b6001600160a01b03161480610fa257506001600160a01b03851663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b158015610f6a57600080fd5b505afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa291906154f3565b610fbe5760405162461bcd60e51b8152600401610a2690615981565b604051806101600160405280866001600160a01b03168152602001610fe03390565b6001600160a01b03168152600060208201819052604082018790526060820186905242608083015260a0820181905260c0820181905260e0820152610100016001815260200160019052600082815260136020908152604091829020835181546001600160a01b03199081166001600160a01b03928316178355928501516001808401805486169284169290921790915593850151600280840180549095169190921617909255606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e08401516007820155610100840151600882015561012084015160098201805492949193909260ff1916919084908111156110fb57634e487b7160e01b600052602160045260246000fd5b021790555061014082015160098201805461ff00191661010083600281111561113457634e487b7160e01b600052602160045260246000fd5b0217905550506040805183815233602082015280820186905242606082015290518692506001600160a01b038816917f49106c20b85d090f5e277321755f4aa52208129bcbc2940327186f7f7f1c031a919081900360800190a36001600160a01b0385166342842e0e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101879052606401600060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b505050505050505050565b61121582826143f1565b600082815260016020526040902061122d908261439b565b505050565b61123c8282614417565b600082815260016020526040902061122d9082614491565b61126c600080516020615cd4833981519152336107ab565b6112885760405162461bcd60e51b8152600401610a26906158ac565b60025460ff166112aa5760405162461bcd60e51b8152600401610a26906157a0565b426004556112b66144a6565b565b60006112c98c338d88888888614512565b6113095760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610a26565b6113188c8c8c8c8c8c8c6117be565b9c9b505050505050505050505050565b60005b825181101561122d5761136583828151811061135757634e487b7160e01b600052603260045260246000fd5b602002602001015183612c10565b8061136f81615c3c565b91505061132b565b61138f600080516020615cd4833981519152336107ab565b6113ab5760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16156113ce5760405162461bcd60e51b8152600401610a2690615841565b6001600160a01b038316600090815260116020526040902054156114255760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48195e1a5cda5d60921b6044820152606401610a26565b60408051808201825283815260208082018481526001600160a01b0387166000818152601184528590209351845590516001909301929092558251338152908101919091528082018490526060810183905290517ff5c7e6c2b8dc927897290afe37ff3c0df5d40c978875b7588c11d639f990b5499181900360800190a1505050565b60025460ff16156114cb5760405162461bcd60e51b8152600401610a2690615841565b600081815260136020526040902060098101546002820154600180840154845460039095015460ff8086169661010090960416946001600160a01b03948516949283169392169185600281111561153257634e487b7160e01b600052602160045260246000fd5b146115915760405162461bcd60e51b815260206004820152602960248201527f4974656d206973206e6f74206f6e2041756374696f6e206f72204c697374656460448201526820666f722073616c6560b81b6064820152608401610a26565b6001600160a01b03831633146115e35760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610a26565b6001600160a01b038416156116315760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c903137bab3b43a103a37b5b2b760611b6044820152606401610a26565b600186600281111561165357634e487b7160e01b600052602160045260246000fd5b146116cf5760008781526013602052604081206005015460035490919061167a9083615a6d565b9050428111156116cc5760405162461bcd60e51b815260206004820152601e60248201527f4e6f74207468652074696d6520746f2044656c6973742061756374696f6e00006044820152606401610a26565b50505b600087815260136020526040902060090180546002919061ff001916610100830217905550604080518881526001600160a01b038085166020830152851691810191909152606081018290524260808201527f6dc4b575e1450ba0ba61ffb69a8da69f79d671bee33a01783b6a14c469cb7e709060a00160405180910390a1604051632142170760e11b8152306004820152336024820152604481018290526001600160a01b038316906342842e0e906064015b600060405180830381600087803b15801561179d57600080fd5b505af11580156117b1573d6000803e3d6000fd5b5050505050505050505050565b60006117cc60025460ff1690565b156117e95760405162461bcd60e51b8152600401610a2690615841565b856000811161183a5760405162461bcd60e51b815260206004820152601960248201527f5a65726f2056616c7565206973206e6f7420616c6c6f776564000000000000006044820152606401610a26565b6000851561189a57878510156118925760405162461bcd60e51b815260206004820152601960248201527f5a65726f207072696365206973206e6f7420616c6c6f776564000000000000006044820152606401610a26565b5060026118a1565b5060009350835b61a8c084116119085760405162461bcd60e51b815260206004820152602d60248201527f41756374696f6e2073686f756c64206265206c69766520666f72206d6f72652060448201526c7468616e20313220686f75727360981b6064820152608401610a26565b600f5487101561195a5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642041756374696f6e207175616c69667920416d6f756e7400006044820152606401610a26565b60006119668542615a6d565b60168054919250600061197883615c3c565b91905055508a8a6119863390565b6016546040516bffffffffffffffffffffffff19606095861b8116602083015260348201949094529190931b909116605482015260688101839052608881019190915260a80160408051808303601f19018152908290528051602090910120601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440181905563020604bf60e21b8252600482018c9052945030906001600160a01b038d169063081812fc9060240160206040518083038186803b158015611a5b57600080fd5b505afa158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9391906151dd565b6001600160a01b03161480611b3057506001600160a01b038b1663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b158015611af857600080fd5b505afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906154f3565b611b4c5760405162461bcd60e51b8152600401610a2690615981565b6040518061016001604052808c6001600160a01b03168152602001611b6e3390565b6001600160a01b0316815260200160006001600160a01b031681526020018b815260200187815260200182815260200160035483611bac9190615a6d565b81526020018981526020018a8152602001836002811115611bdd57634e487b7160e01b600052602160045260246000fd5b815260200160019052600085815260136020908152604091829020835181546001600160a01b03199081166001600160a01b03928316178355928501516001808401805486169284169290921790915593850151600280840180549095169190921617909255606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e08401516007820155610100840151600882015561012084015160098201805492949193909260ff191691908490811115611cb757634e487b7160e01b600052602160045260246000fd5b021790555061014082015160098201805461ff001916610100836002811115611cf057634e487b7160e01b600052602160045260246000fd5b02179055505060408051868152336020820152808201899052606081018c90526080810184905260a081018b90524260c082015290518c92506001600160a01b038e16917f65899c700e34c95deda58c22101038a1b7736227061b7659da815d75a88a8d5b919081900360e00190a36001600160a01b038b166342842e0e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018d9052606401600060405180830381600087803b158015611dbd57600080fd5b505af1158015611dd1573d6000803e3d6000fd5b50505050505050979650505050505050565b806001600160a01b038116611e3a5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2061646472657373206973206e6f7420616c6c6f77656400000000006044820152606401610a26565b611e456000336107ab565b611e805760405162461bcd60e51b815260206004820152600c60248201526b155b905d5d1a1bdc9a5e995960a21b6044820152606401610a26565b6002805474ffffffffffffffffffffffffffffffffffffffff0019166101006001600160a01b03851602179055611eb86000836145c2565b6040516001600160a01b03831681527f07725cf1e627ba6b8a0d3bde9462e150e033b44fa6f17a31024d141122c1396f906020015b60405180910390a15050565b60025460ff16611f1b5760405162461bcd60e51b8152600401610a26906157a0565b60008181526013602052604090206009810154600282015460018301548354600585015460039095015461010090940460ff16946001600160a01b03938416949284169390911691338414611fac5760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610a26565b6001600160a01b03851615611ffa5760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c903137bab3b43a103a37b5b2b760611b6044820152606401610a26565b600186600281111561201c57634e487b7160e01b600052602160045260246000fd5b146120695760405162461bcd60e51b815260206004820181905260248201527f416c726561647920626f75676874206f722063616e63656c656420746f6b656e6044820152606401610a26565b60008781526013602090815260409182902060098101805461ff0019166102001790556007015482518a81526001600160a01b03878116938201939093529187168284015260608201849052608082015260a081018490524260c082015290517f60974777054aa4309a55a645d5dab87017a79bbad06dac2fda24be4d8e3b49969181900360e00190a1604051632142170760e11b81523060048201526001600160a01b038581166024830152604482018390528416906342842e0e90606401611783565b60006109ea826145cc565b6000818152601360205260408120805460018201546002808401546003850154600486015460058701546006880154600789015460088a01546009909a01546001600160a01b03998a169b988a169a9690991698949793969295919490939192829160ff61010090910416908111156121c257634e487b7160e01b600052602160045260246000fd5b60008d81526013602052604090206009015490915060ff1660028111156121f957634e487b7160e01b600052602160045260246000fd5b915091939597999b90929496989a50565b612222600080516020615cd4833981519152336107ab565b61223e5760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16156122615760405162461bcd60e51b8152600401610a2690615841565b6112b661466c565b60606005805461227890615c01565b80601f01602080910402602001604051908101604052809291908181526020018280546122a490615c01565b80156122f15780601f106122c6576101008083540402835291602001916122f1565b820191906000526020600020905b8154815290600101906020018083116122d457829003601f168201915b5050505050905090565b600082815260016020526040812061231390836146c4565b9392505050565b612332600080516020615cd4833981519152336107ab565b61234e5760405162461bcd60e51b8152600401610a26906158ac565b60025460ff166123705760405162461bcd60e51b8152600401610a26906157a0565b80516123839060059060208401906150b4565b507fe28169ccda724be8baad801e6de41dad86e49186953944c40f68eb91e100ea86816040516123b3919061576d565b60405180910390a150565b6123e87f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f7336107ab565b6124345760405162461bcd60e51b815260206004820181905260248201527f537461727446694d61726b6574506c6163653a20556e417574686f72697a65646044820152606401610a26565b600f819055600d546124469082615b84565b600e5550565b60025460ff161561246f5760405162461bcd60e51b8152600401610a2690615841565b600081815260136020526040902060050154421180156124c35750600160008281526013602052604090206009015460ff1660028111156124c057634e487b7160e01b600052602160045260246000fd5b14155b6125245760405162461bcd60e51b815260206004820152602c60248201527f41756374696f6e206973206e6f7420656e646564206f72206e6f206c6f6e676560448201526b391037b71030bab1ba34b7b760a11b6064820152608401610a26565b60008181526015602090815260408083206001908101546013808552838620808401548154600383015460148952878a206001600160a01b03968716808c52908a52978a2090960154988a905292909652600701549395948216949116923386146125d15760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74207468652077696e6e657200000000000000006044820152606401610a26565b600e548211156126095760008781526010602052604090205460ff166126095760405162461bcd60e51b8152600401610a26906159d2565b600654604051636eb1769f60e11b81526001600160a01b0388811660048301523060248301528492169063dd62ed3e9060440160206040518083038186803b15801561265457600080fd5b505afa158015612668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268c919061569f565b10156126aa5760405162461bcd60e51b8152600401610a26906157d7565b6126e56040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b602081018490526001600160a01b038516815260408101839052612708866146d0565b60808301526060820152600061271d82614722565b60008a81526014602090815260408083206001600160a01b038d168085529083528184206002908101805461ffff191660011790558e85526013845282852060098101805461ff00191690550180546001600160a01b031916821790558352600c909152812080549293508592909190612798908490615ba3565b92505081905550887f770608f9b23b449846d60bf6a9fd216b33db427cd5726cf1071d134311431442601560008c815260200190815260200160002060000154888b89898760000151886020015189604001518a606001514260405161285a9a99989796959493929190998a526001600160a01b0398891660208b015296881660408a015260608901959095526080880193909352941660a086015260c085019390935260e08401929092526101008301919091526101208201526101400190565b60405180910390a26006546001600160a01b03166323b872dd33600254604085810151905160e085901b6001600160e01b03191681526001600160a01b03938416600482015261010090920490921660248201526044810191909152606401602060405180830381600087803b1580156128d357600080fd5b505af11580156128e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290b91906154f3565b6129575760405162461bcd60e51b815260206004820152601f60248201527f436f756c646e2774207472616e7366657220746f6b656e2061732066656573006044820152606401610a26565b866001600160a01b031681600001516001600160a01b031614156129935780602001518160600181815161298b9190615a6d565b905250612a70565b80516001600160a01b0316158015906129af5750602081015115155b15612a70576006546001600160a01b03166323b872dd338351602085015160405160e085901b6001600160e01b03191681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015612a1c57600080fd5b505af1158015612a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5491906154f3565b612a705760405162461bcd60e51b8152600401610a269061586b565b6006546001600160a01b03166323b872dd3360608401516040516001600160e01b031960e085901b1681526001600160a01b039283166004820152918b1660248301526044820152606401602060405180830381600087803b158015612ad557600080fd5b505af1158015612ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0d91906154f3565b612b295760405162461bcd60e51b8152600401610a26906158e3565b6001600160a01b0386166342842e0e30335b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101889052606401600060405180830381600087803b158015612b8a57600080fd5b505af1158015612b9e573d6000803e3d6000fd5b50505050505050505050505050565b612bbc87338887878787614512565b612bfc5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610a26565b612c07878787610d65565b50505050505050565b60008281526014602090815260408083206001600160a01b0385168452909152902060010154612c965760405162461bcd60e51b815260206004820152602b60248201527f426964646572206973206e6f742070617274696369706174696e6720696e207460448201526a3434b99030bab1ba34b7b760a91b6064820152608401610a26565b60008281526014602090815260408083206001600160a01b0385168452909152902060020154610100900460ff16612d035760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995b19585cd95960821b6044820152606401610a26565b6000828152601360205260409020600501544211612d765760405162461bcd60e51b815260206004820152602a60248201527f43616e206e6f742072656c65617365207374616b657320666f722072756e6e6960448201526937339030bab1ba34b7b760b11b6064820152608401610a26565b6000828152601560205260409020600101546001600160a01b0382811691161415612e135760405162461bcd60e51b815260206004820152604160248201527f57696e6e6572206269646465722063616e20206f6e6c79202072656c6561736560448201527f207374616b65732062792066756c66696c6c696e67207468652061756374696f6064820152603760f91b608482015260a401610a26565b612e1d82826147fd565b5050565b612e39600080516020615cd4833981519152336107ab565b612e555760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16612e775760405162461bcd60e51b8152600401610a26906157a0565b620151808111612e8657600080fd5b60038190556040518181527ff49a73cf36f0d199722739f91a682c327b1e2d3fde466a159e78e0ea0dbbacf8906020016123b3565b60008181526001602052604081206109ea906148c7565b60025460ff1615612ef55760405162461bcd60e51b8152600401610a2690615841565b60008281526013602052604090206005015442108015612f4d57506001600083815260136020526040902060090154610100900460ff166002811115612f4b57634e487b7160e01b600052602160045260246000fd5b145b8015612f8d5750600160008381526013602052604090206009015460ff166002811115612f8a57634e487b7160e01b600052602160045260246000fd5b14155b612fcc5760405162461bcd60e51b815260206004820152601060248201526f105d58dd1a5bdb881a5cc8195b99195960821b6044820152606401610a26565b6000828152601560205260409020600101546001600160a01b031680613078576000838152601360205260409020600801548210156130735760405162461bcd60e51b815260206004820152603660248201527f626964207072696365206d757374206265206d6f7265207468616e206f72206560448201527f7175616c20746865206d696e696d756d207072696365000000000000000000006064820152608401610a26565b6130fd565b60008381526014602090815260408083206001600160a01b038516845290915290206001015482116130fd5760405162461bcd60e51b815260206004820152602860248201527f626964207072696365206d757374206265206d6f7265207468616e20746865206044820152671b185cdd08189a5960c21b6064820152608401610a26565b6000838152601460209081526040808320338452909152812060020154610100900460ff1661323e575060008381526013602081815260408084208054600382015483518086018b90526bffffffffffffffffffffffff19606093841b811682870152339384901b1660548201526068808201929092528451808203909201825260880190935282519284019290922094889052929091526007909101549081906131a7906145cc565b10156131eb5760405162461bcd60e51b81526020600482015260136024820152724e6f7420656e6f75676820726573657276657360681b6044820152606401610a26565b336000908152600c60205260408120805483929061320a908490615a6d565b90915550505060008481526014602090815260408083203384529091529020600201805461ff001916610100179055613263565b5060008381526014602090815260408083206001600160a01b03851684529091529020545b604051806040016040528082815260200161327b3390565b6001600160a01b0390811690915260008681526015602090815260408083208551815594820151600195860180546001600160a01b03191691909516179093558251608081018452858152808201888152818501848152606083018781528b86526014855286862033808852955295909420915182555194810194909455905160029093018054925115156101000261ff00199415159490941661ffff199093169290921792909217905584907fa43ab005b7a0aa4220e1af7738a3d9d19267c3b522daa2f7c7ba4659d48d89ca908390604080519283526001600160a01b039091166020830152810186905242606082015260800160405180910390a250505050565b613397600080516020615cd4833981519152336107ab565b6133b35760405162461bcd60e51b8152600401610a26906158ac565b60025460ff16156133d65760405162461bcd60e51b8152600401610a2690615841565b6001600083815260136020526040902060090154610100900460ff16600281111561341157634e487b7160e01b600052602160045260246000fd5b1461345e5760405162461bcd60e51b815260206004820181905260248201527f537461727446694d61726b6574706c6163653a20496e76616c6964206974656d6044820152606401610a26565b80156134f657600160008381526013602052604090206009015460ff16600281111561349a57634e487b7160e01b600052602160045260246000fd5b146134d8576000828152601360205260409020600501544211156134d8576003546134c59042615a6d565b6000838152601360205260409020600601555b6000828152601060205260409020805460ff191660011790556135f5565b60008281526013602081815260408084206001808201546010855292909520805460ff19169055929091526009909101805461020061ff00198216179091556001600160a01b03909116919060ff16600281111561356457634e487b7160e01b600052602160045260246000fd5b146135735761357383826147fd565b6000838152601360205260409081902080546003909101549151632142170760e11b81523060048201526001600160a01b03848116602483015260448201939093529116906342842e0e90606401600060405180830381600087803b1580156135db57600080fd5b505af11580156135ef573d6000803e3d6000fd5b50505050505b6040805133815282151560208201524281830152905183917f48b5e4e1991033d8c319ccd4a32a2be182193c79acb3dbb1780c51d1a7fbc635919081900360600190a25050565b61123c82826148d1565b60025460ff16156136695760405162461bcd60e51b8152600401610a2690615841565b6000818152601360205260409020600981015460048201546003830154600180850154945460ff61010086048116969516946001600160a01b03908116929116908660028111156136ca57634e487b7160e01b600052602160045260246000fd5b1480156136f7575060008560028111156136f457634e487b7160e01b600052602160045260246000fd5b14155b61373a5760405162461bcd60e51b81526020600482015260146024820152734974656d206973206e6f7420666f722073616c6560601b6044820152606401610a26565b600285600281111561375c57634e487b7160e01b600052602160045260246000fd5b14156137b95760008781526013602052604090206005015442106137b95760405162461bcd60e51b81526020600482015260146024820152734974656d206973206e6f7420666f722073616c6560601b6044820152606401610a26565b600e548411156137f15760008781526010602052604090205460ff166137f15760405162461bcd60e51b8152600401610a26906159d2565b60065484906001600160a01b031663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b15801561384a57600080fd5b505afa15801561385e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613882919061569f565b10156138a05760405162461bcd60e51b8152600401610a26906157d7565b6138db6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b602081018490526001600160a01b0382168152604081018590526138fe836146d0565b60808301526060820152600061391382614722565b60008a81526013602090815260409182902060098101805461ff001916905560020180546001600160a01b031916339081179091558351848301518585015160608088015187516001600160a01b038d81168252978101969096528c8716868901529085018d9052608085018e90529490921660a084015260c083015260e08201526101008101919091524261012082015290519192508a917fc97bbff05b26896fa1898eff8bcf3414f69bfa3c156d78a49344d5cfbf5e2c8c918190036101400190a26006546001600160a01b03166323b872dd33600254604085810151905160e085901b6001600160e01b03191681526001600160a01b03938416600482015261010090920490921660248201526044810191909152606401602060405180830381600087803b158015613a4857600080fd5b505af1158015613a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8091906154f3565b613acc5760405162461bcd60e51b815260206004820152601f60248201527f436f756c646e2774207472616e7366657220746f6b656e2061732066656573006044820152606401610a26565b836001600160a01b031681600001516001600160a01b03161415613b0857806020015181606001818151613b009190615a6d565b905250613be5565b80516001600160a01b031615801590613b245750602081015115155b15613be5576006546001600160a01b03166323b872dd338351602085015160405160e085901b6001600160e01b03191681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015613b9157600080fd5b505af1158015613ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc991906154f3565b613be55760405162461bcd60e51b8152600401610a269061586b565b6006546001600160a01b03166323b872dd3360608401516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291881660248301526044820152606401602060405180830381600087803b158015613c4a57600080fd5b505af1158015613c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8291906154f3565b613c9e5760405162461bcd60e51b8152600401610a26906158e3565b6001600160a01b0383166342842e0e3033612b3b565b60128181548110613cc457600080fd5b600091825260209091200154905081565b600080613ce460025460ff1690565b15613d015760405162461bcd60e51b8152600401610a2690615841565b50506000818152601560209081526040808320600190810154601390935292209182015482546009840154600385015460078601546006909601546001600160a01b039384169691958416949093169260ff90921691613d5e3390565b6001600160a01b0316846001600160a01b031614613dbe5760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792053656c6c65722063616e20646973707574650000000000000000006044820152606401610a26565b6001600089815260136020526040902060090154610100900460ff166002811115613df957634e487b7160e01b600052602160045260246000fd5b148015613e2657506001836002811115613e2357634e487b7160e01b600052602160045260246000fd5b14155b613e7e5760405162461bcd60e51b815260206004820152602360248201527f4d61726b6574706c6163653a204974656d206973206e6f74206f6e204175637460448201526234b7b760e91b6064820152608401610a26565b6001600160a01b038516613ed45760405162461bcd60e51b815260206004820181905260248201527f4d61726b6574706c6163653a2041756374696f6e20686173206e6f20626964736044820152606401610a26565b42811115613f355760405162461bcd60e51b815260206004820152602860248201527f4d61726b6574706c6163653a2043616e206e6f742064697370757465206265666044820152676f72652074696d6560c01b6064820152608401610a26565b42600354600454613f469190615a6d565b10613fc75760405162461bcd60e51b8152602060048201526044602482018190527f436f6e747261637420686173206a757374656420756e7061757365642c20706c908201527f65617365206769766520746865206269646465722074696d6520746f2066756c606482015263199a5b1b60e21b608482015260a401610a26565b600e5460008981526014602090815260408083206001600160a01b038a16845290915290206001015411156140245760008881526010602052604090205460ff166140245760405162461bcd60e51b8152600401610a26906159d2565b600080614030846148f7565b9150915061405487600260019054906101000a90046001600160a01b03168461491f565b6140705760405162461bcd60e51b8152600401610a2690615924565b61407b87878361491f565b6140975760405162461bcd60e51b8152600401610a2690615924565b60008a81526014602090815260408083206001600160a01b038b1684528252808320600201805461ff0019169055600c909152812080548692906140dc908490615ba3565b909155505060008a8152601360209081526040808320600901805461ff00191661020017905560158252918290205482519081526001600160a01b038c81169282019290925289821681840152606081018b9052908816608082015260a0810186905260c0810183905260e081018490524261010082015290518b917fb46a91724b95c8764d64242653194717e2ab549e1b76e207124d3bddc39aed6d91908190036101200190a260408051632142170760e11b8152306004820152336024820152604481018a905290516001600160a01b038b16916342842e0e91606480830192600092919082900301818387803b1580156141d857600080fd5b505af11580156141ec573d6000803e3d6000fd5b5050505050505050505050915091565b60065460008681526014602090815260408083203380855292529182902060010154915163d505accf60e01b81526001600160a01b039093169263d505accf9261425492913091908a908a908a908a9060040161572c565b600060405180830381600087803b15801561426e57600080fd5b505af1158015614282573d6000803e3d6000fd5b5050505061428f8561244c565b5050505050565b806001600160a01b0381166142ed5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f2061646472657373206973206e6f7420616c6c6f77656400000000006044820152606401610a26565b614305600080516020615cd4833981519152336107ab565b6143215760405162461bcd60e51b8152600401610a26906158ac565b60025460ff166143435760405162461bcd60e51b8152600401610a26906157a0565b600680546001600160a01b0319166001600160a01b0384169081179091556040519081527f34ebd4cf402719b97a4e51402bd4a109c70b0b732ce4ead80c769d9d2a427ac090602001611eed565b612e1d82826149b6565b6000612313836001600160a01b038416614a3a565b60006001600160e01b03198216637965db0b60e01b14806109ea57506301ffc9a760e01b6001600160e01b03198316146109ea565b60006123138383614a89565b60008281526020819052604090206001015461440d8133614aa1565b61122d83836149b6565b6001600160a01b03811633146144875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a26565b612e1d8282614b05565b6000612313836001600160a01b038416614b6a565b60025460ff166144c85760405162461bcd60e51b8152600401610a26906157a0565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061451d88614c87565b156145b35760405163d505accf60e01b81526001600160a01b0389169063d505accf9061455a908a9030908b908b908b908b908b9060040161572c565b602060405180830381600087803b15801561457457600080fd5b505af1158015614588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ac91906154f3565b90506145b7565b5060005b979650505050505050565b6112158282614391565b6001600160a01b038181166000818152600c6020526040808220546009549151630fa6707960e21b815260048101949094529193919283929190911690633e99c1e49060240160206040518083038186803b15801561462a57600080fd5b505afa15801561463e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614662919061569f565b6123139190615ba3565b60025460ff161561468f5760405162461bcd60e51b8152600401610a2690615841565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586144f53390565b60006123138383614d0d565b6001600160a01b0381166000908152601160205260408120548190156147155750506001600160a01b0316600090815260116020526040902080546001909101549091565b5050600754600854915091565b614756604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b61476d826040015183606001518460800151614d45565b60408083018290528301516147829190615ba3565b6060820152815161479290614d66565b156147f8576147ae826000015183602001518460400151614d9c565b602083018190526001600160a01b039091168252158015906147d9575080516001600160a01b031615155b156147f857806020015181606001516147f29190615ba3565b60608201525b919050565b6001600160a01b0381166000818152600c602081815260408084208054888652601384529185206007015495855292909152929182919061483e8386615ba3565b909155505060008481526014602090815260408083206001600160a01b038716808552908352818420600201805461ff0019169055600c8352928190205481519384529183018590528201819052426060830152907f818521a1b12d29402a8e33bac65a0263cfcadaca4429aa2c3831eb4cc2c3d2979060800160405180910390a15050505050565b60006109ea825490565b6000828152602081905260409020600101546148ed8133614aa1565b61122d8383614b05565b60008061490c83671bc16d674ec80000614a89565b91506149188284615ba3565b9050915091565b60095460405163929c517960e01b81526001600160a01b038581166004830152848116602483015260448201849052600092169063929c517990606401602060405180830381600087803b15801561497657600080fd5b505af115801561498a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ae91906154f3565b949350505050565b6149c082826107ab565b612e1d576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556149f63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054614a81575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109ea565b5060006109ea565b60006123138383614a9c6012600a615adc565b614e2b565b614aab82826107ab565b612e1d57614ac3816001600160a01b03166014614e84565b614ace836020614e84565b604051602001614adf9291906156b7565b60408051601f198184030181529082905262461bcd60e51b8252610a269160040161576d565b614b0f82826107ab565b15612e1d576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015614c7d576000614b8e600183615ba3565b8554909150600090614ba290600190615ba3565b9050818114614c23576000866000018281548110614bd057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110614c0157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614c4257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109ea565b60009150506109ea565b6040516301ffc9a760e01b815263152a902d60e11b60048201526000906001600160a01b038316906301ffc9a7906024015b60206040518083038186803b158015614cd157600080fd5b505afa925050508015614d01575060408051601f3d908101601f19168201909252614cfe918101906154f3565b60015b6109ea57506000919050565b6000826000018281548110614d3257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006149ae614d5f614d58846064615b84565b8590615066565b8590615089565b6040516301ffc9a760e01b815263152a902d60e11b60048201526000906001600160a01b038316906301ffc9a790602401614cb9565b60405163152a902d60e11b8152600481018390526024810182905260009081906001600160a01b03861690632a55205a90604401604080518083038186803b158015614de757600080fd5b505afa158015614dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e1f9190615276565b90969095509350505050565b60008083614e3a84600a615b84565b614e449087615b84565b614e4e9190615a85565b90506005614e5d600a83615c57565b10614e7057614e6d600a82615a6d565b90505b614e7b600a82615a85565b95945050505050565b60606000614e93836002615b84565b614e9e906002615a6d565b67ffffffffffffffff811115614ec457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614eee576020820181803683370190505b509050600360fc1b81600081518110614f1757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614f5457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000614f78846002615b84565b614f83906001615a6d565b90505b6001811115615017576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614fc557634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110614fe957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361501081615bea565b9050614f86565b5083156123135760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a26565b6000816150756012600a615adc565b61507f9085615b84565b6123139190615a85565b6000612313838361509c6012600a615adc565b6000806150aa600a84615a85565b614e448587615b84565b8280546150c090615c01565b90600052602060002090601f0160209004810192826150e25760008555615128565b82601f106150fb57805160ff1916838001178555615128565b82800160010185558215615128579182015b8281111561512857825182559160200191906001019061510d565b50615134929150615138565b5090565b5b808211156151345760008155600101615139565b600067ffffffffffffffff83111561516757615167615c97565b61517a601f8401601f1916602001615a3c565b905082815283838301111561518e57600080fd5b828260208301376000602084830101529392505050565b80356147f881615cad565b803560ff811681146147f857600080fd5b6000602082840312156151d2578081fd5b813561231381615cad565b6000602082840312156151ee578081fd5b815161231381615cad565b6000806000806080858703121561520e578283fd5b843561521981615cad565b9350602085013561522981615cad565b925060408501359150606085013567ffffffffffffffff81111561524b578182fd5b8501601f8101871361525b578182fd5b61526a8782356020840161514d565b91505092959194509250565b60008060408385031215615288578182fd5b825161529381615cad565b6020939093015192949293505050565b6000806000606084860312156152b7578283fd5b83356152c281615cad565b95602085013595506040909401359392505050565b600080600080600080600060e0888a0312156152f1578283fd5b87356152fc81615cad565b9650602088013595506040880135945060608801359350608088013561532181615cc5565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060008060008060006101608c8e03121561535f578384fd5b8b3561536a81615cad565b9a5060208c0135995060408c0135985060608c0135975060808c013561538f81615cc5565b965060a08c0135955060c08c0135945060e08c013593506153b36101008d016151b0565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600080600080600080600060e0888a0312156153ef578081fd5b87356153fa81615cad565b965060208801359550604088013594506060880135935061541d608089016151b0565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561544b578182fd5b823567ffffffffffffffff80821115615462578384fd5b818501915085601f830112615475578384fd5b813560208282111561548957615489615c97565b8160051b925061549a818401615a3c565b8281528181019085830185870184018b10156154b4578889fd5b8896505b848710156154d65780358352600196909601959183019183016154b8565b5096506154e690508782016151a5565b9450505050509250929050565b600060208284031215615504578081fd5b815161231381615cc5565b600060208284031215615520578081fd5b5035919050565b60008060408385031215615539578182fd5b82359150602083013561554b81615cad565b809150509250929050565b60008060408385031215615568578182fd5b82359150602083013561554b81615cc5565b6000806040838503121561558c578182fd5b50508035926020909101359150565b60008060008060008060c087890312156155b3578384fd5b8635955060208701359450604087013593506155d1606088016151b0565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215615602578283fd5b8535945060208601359350615619604087016151b0565b94979396509394606081013594506080013592915050565b600060208284031215615642578081fd5b81356001600160e01b031981168114612313578182fd5b60006020828403121561566a578081fd5b813567ffffffffffffffff811115615680578182fd5b8201601f81018413615690578182fd5b6149ae8482356020840161514d565b6000602082840312156156b0578081fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516156ef816017850160208801615bba565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615720816028840160208801615bba565b01602801949350505050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b602081526000825180602084015261578c816040850160208701615bba565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526044908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20776960408201527f7468647261772074686520726571756972656420616d6f756e74206f6620746f6060820152636b656e7360e01b608082015260a00190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2069737375656040820152603960f91b606082015260800190565b60208082526017908201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2073656c6c656040820152603960f91b606082015260800190565b6020808252603a908201527f4d61726b6574706c6163653a20636f756c646e2774206465647563742074686560408201527f2066696e6520666f72207468652061646d696e2077616c6c6574000000000000606082015260800190565b60208082526031908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20747260408201527030b739b332b9103cb7bab9103a37b5b2b760791b606082015260800190565b60208082526044908201527f537461727466694d61726b6574706c6163653a2050726963652065786365656460408201527f656420746865206361702e20596f75206e65656420746f2067657420617070726060820152631bdd995960e21b608082015260a00190565b604051601f8201601f1916810167ffffffffffffffff81118282101715615a6557615a65615c97565b604052919050565b60008219821115615a8057615a80615c6b565b500190565b600082615a9457615a94615c81565b500490565b600181815b80851115615ad4578160001904821115615aba57615aba615c6b565b80851615615ac757918102915b93841c9390800290615a9e565b509250929050565b60006123138383600082615af2575060016109ea565b81615aff575060006109ea565b8160018114615b155760028114615b1f57615b3b565b60019150506109ea565b60ff841115615b3057615b30615c6b565b50506001821b6109ea565b5060208310610133831016604e8410600b8410161715615b5e575081810a6109ea565b615b688383615a99565b8060001904821115615b7c57615b7c615c6b565b029392505050565b6000816000190483118215151615615b9e57615b9e615c6b565b500290565b600082821015615bb557615bb5615c6b565b500390565b60005b83811015615bd5578181015183820152602001615bbd565b83811115615be4576000848401525b50505050565b600081615bf957615bf9615c6b565b506000190190565b600181811c90821680615c1557607f821691505b60208210811415615c3657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615c5057615c50615c6b565b5060010190565b600082615c6657615c66615c81565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114615cc257600080fd5b50565b8015158114615cc257600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220e16c9fdf58e3d57531c8ac25a0483909dab2d2685d4ee8c63970cb8f3c250c8864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addOffer(address,uint256,uint256)": {
        "details": "only called by `owner` to change the name and `whenPaused`",
        "params": {
          "_fee": "marketplace reputation contract",
          "feeBase": "marketplace reputation contract",
          "wallet": "marketplace reputation contract"
        }
      },
      "approveDeal(bytes32,bool)": {
        "details": "only called by `owner` to approve listing that exceeded cap after doing the KYC",
        "params": {
          "listingId": "listing Id",
          "status": "kyc status emit HandelKyc"
        }
      },
      "bid(bytes32,uint256)": {
        "details": "called by dapps to bid on an auction",
        "params": {
          "bidPrice": "price emit : BidOnAuction",
          "listingId": "listing id"
        }
      },
      "buyNow(bytes32)": {
        "details": "called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace",
        "params": {
          "listingId": "listing id emit : BuyNow"
        }
      },
      "changeFees(uint256,uint256)": {
        "details": "the formula is (fees * 1000)/base",
        "params": {
          "donomirator": "the new basefees value to be stored",
          "numerator": "the new fees value to be stored"
        },
        "returns": {
          "percentage": "the value of the state variable `_feeFraction`"
        }
      },
      "changeListInsuranceAmount(uint256,uint256)": {
        "details": "the formula is (fees * 1000)/base",
        "params": {
          "donomirator": "the new basefees value to be stored",
          "numerator": "the new fees value to be stored"
        },
        "returns": {
          "percentage": "the value of the state variable `_feeFraction`"
        }
      },
      "changeMarketPlaceName(string)": {
        "details": "only called by `owner` to change the name and `whenPaused`",
        "params": {
          "_name": "marketplace new name"
        }
      },
      "changeUtilityToken(address)": {
        "details": "only called by `owner` to change the name and `whenPaused`",
        "params": {
          "_token": "token address"
        }
      },
      "createAuction(address,uint256,uint256,uint256,bool,uint256,uint256)": {
        "details": "called by dapps to create  new auction",
        "params": {
          "duration": "when auction ends",
          "insuranceAmount": "amount of token locked as qualify for any bidder wants bid",
          "isSellForEnabled": "true if auction enable direct selling",
          "listingPrice": "price  to sell with if isSellForEnabled=true",
          "minimumBid": "minimum Bid price",
          "token": "nft contract address",
          "tokenId": "token id"
        },
        "returns": {
          "listId": "listing id**  Users who want to list their NFT as auction for bidding with/without allowing direct sale. - user MUST approve contract to transfer the NFT      - Time to live auction duration must be more than 12 hours. - if `sellForEnabled` is true, `sellFor` value must be more than zero - auction creator MUST specify the insurance amounts for any bidder to bid with considering that it MUST NOT be less that 1 USDT value in STFI. **  emit : CreateAuction"
        }
      },
      "createAuctionWithPermit(address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "called by dapps to create  new auction",
        "params": {
          "deadline": ":  must be timestamp in future .",
          "duration": "when auction ends",
          "insuranceAmount": "amount of token locked as qualify for any bidder wants bid",
          "isSellForEnabled": "true if auction enable direct selling",
          "listingPrice": "min price",
          "minimumBid": "price  to sell with if isSellForEnabled=true",
          "r": ": normal output of an ECDSA signature",
          "s": ": normal output of an ECDSA signature `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.",
          "token": "nft contract address",
          "tokenId": "token id",
          "v": "needed to recover the public key"
        },
        "returns": {
          "listId": "listing id**  Users who want to list their NFT as auction for bidding with/without allowing direct sale call this function without sending prior transaction to `approve` the marketplace to transfer NFT. This function call`permit` [`eip-2612`] then call [`createAuction`] internally.**"
        }
      },
      "deList(bytes32)": {
        "details": "called by seller through dapps when s/he wants to remove this token from the marketplace",
        "params": {
          "listingId": "listing id emit DeListOffMarketplace"
        }
      },
      "disputeAuction(bytes32)": {
        "details": "called by seller through dapps when his/her auction is  not fulfilled after 3 days",
        "params": {
          "listingId": "listing id"
        },
        "returns": {
          "_token": "nft contract address",
          "tokenId": "token id emit : DisputeAuction"
        }
      },
      "fulfillBid(bytes32)": {
        "details": "called by bidder through dapps when bidder win an auction and wants to pay to get the NFT",
        "params": {
          "listingId": "listing id"
        }
      },
      "fulfillBidWithPermit(bytes32,uint256,uint8,bytes32,bytes32)": {
        "details": "called by bidder through dapps when bidder win an auction and wants to pay to get the NFT",
        "params": {
          "deadline": ":  must be timestamp in future .",
          "listingId": "listing id",
          "r": ": normal output of an ECDSA signature",
          "s": ": normal output of an ECDSA signature `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.",
          "v": "needed to recover the public key"
        }
      },
      "getAuctionBidDetails(bytes32,address)": {
        "details": "called by dapp or any contract to get info about a given bidder in a listing",
        "params": {
          "bidder": "bidder address",
          "listingId": "listing id"
        },
        "returns": {
          "bidId": "bid id",
          "bidPrice": "bid price",
          "isPurchased": "true if purchased",
          "isStakeReserved": "true if the reserve is free"
        }
      },
      "getListingDetails(bytes32)": {
        "details": "called by dapp or any contract to get info about a gevin listing",
        "params": {
          "listingId": "listing id"
        },
        "returns": {
          "buyer": " nft buyer address",
          "disputeTime": " when auction creator can dispute and take the insurance from the bad actor 'bidWinner'",
          "insuranceAmount": " amount of token locked as qualify for any bidder wants bid",
          "listingPrice": "initial price or minimum price that the seller can accept",
          "listingType": "in number { Auction,FixedPrice,AuctionForSale}",
          "minimumBid": "if sell for enabled for auction, this should be more than zero",
          "releaseTime": " when auction ends",
          "seller": " nft seller address",
          "status": "in number {Sold,OnMarket, onAuction,Canceled}",
          "tokenAddress": " nft contract address",
          "tokenId": "NFT token Id"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getServiceFee()": {
        "returns": {
          "_0": "the value of the state variable `_feeFraction`"
        }
      },
      "getStakeAllowance(address)": {
        "details": "this function calls StartFiStakes contract to get the total staked tokens for 'user' an substract the current reserves to get the total number of free tokens",
        "params": {
          "staker": ": participant address"
        },
        "returns": {
          "_0": "allowed number of tokens that this contract can transfer from the owner account"
        }
      },
      "getUserReserved(address)": {
        "details": "called by the dapp to get the user stakes on hold",
        "params": {
          "user": ": participant address"
        },
        "returns": {
          "_0": "the value of user reserves"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "listOnMarketplace(address,uint256,uint256)": {
        "details": "called by dapps to list new item",
        "params": {
          "listingPrice": "min price** Users who want to list their NFT for sale with fixed price call this function  - user MUST approve contract to transfer the NFT      - user MUST have enough stakes used as insurance to not delist the item before the duration stated in the smart contract , if they decided to delist before that time, they lose this insurance. the required insurance amount is a percentage  based on the listing price.**  emit : ListOnMarketplace",
          "token": "nft contract address",
          "tokenId": "token id"
        }
      },
      "listOnMarketplaceWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "called by dapps to list new item",
        "params": {
          "deadline": ":  must be timestamp in future .",
          "listingPrice": "min price",
          "r": ": normal output of an ECDSA signature",
          "s": ": normal output of an ECDSA signature `v`, `r` and `s` must be valid `secp256k1` signature from `owner`  or 'approved for all' account over EIP712-formatted function arguments.** Users who want to list their NFT for sale with fixed price call this function without sending prior transaction to `approve` the marketplace to transfer NFT. This function call`permit` [`eip-2612`] then call [`listOnMarketplace`] internally**",
          "token": "nft contract address",
          "tokenId": "token id",
          "v": "needed to recover the public key"
        }
      },
      "marketPlaceName()": {
        "returns": {
          "_0": "market place name"
        }
      },
      "migrateEmergency(bytes32)": {
        "details": "called by seller through dapps when s/he wants to remove this token from the marketplace",
        "params": {
          "listingId": "listing id emit : MigrateEmergency"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "pause()": {
        "details": "Pauses contract. Requirements: - the caller must be the owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "releaseListingReserves(bytes32,address)": {
        "details": "called by user through dapps when his/her wants to release his reserved tokens which are no longer in active auction .",
        "params": {
          "bidder": "bidder address emit : UserReservesRelease",
          "listingId": "listing idbehalf"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "setPrice(uint256)": {
        "details": "only called by  `priceFeeds` to update the STFI/usdt price",
        "params": {
          "_stfiPrice": "the new stfi price per usdt"
        }
      },
      "setUsdCap(uint256)": {
        "details": "only called by `owner` to update the cap",
        "params": {
          "usdCap_": "the new fees value to be stored"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unpauses contract. Requirements: - the caller must be the owner."
      },
      "updateAdminWallet(address)": {
        "details": "update the admin wallet address. Requirements: - the caller must be the admin. - the `newWallet` must not be empty."
      },
      "winnerBid(bytes32)": {
        "details": "called by dapp or any contract to get info about a winner bid",
        "params": {
          "listingId": "listing id"
        },
        "returns": {
          "bidId": "bid id",
          "bidPrice": "bid price",
          "bidder": "bidder address",
          "isPurchased": "true if purchased",
          "isStakeReserved": "true if the reserve is free"
        }
      }
    },
    "title": "StartFi MarketPlace desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveDeal(bytes32,bool)": {
        "notice": "STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and any purchase transaction with price exceed the cap can't be proceed unless this deal is approved by Startfi by calling this function - called only by account in owner role"
      },
      "bid(bytes32,uint256)": {
        "notice": "** Users who interested in a certain auction, can bid on it by calling this   function.Bidder don't pay / transfer SFTI on bidding. Only when win the auction [`the auction is ended and this bidder is the last one to bid`], bidder pays by calling [`fulfillBid`] OR [`buyNowWithPermit`] - user MUST have enough stakes used as insurance; grantee and punishment mechanism for malicious bidder. If the bidder don't pay in the   - Bidders can bid as much as they wants , insurance is taken once in the first participation  - the bid price MUST be more than the last bid , if this is the first bid, the bid price MUST be more than or equal the minimum bid the auction creator state - Users CAN NOT bid on auction after auction time is over**"
      },
      "buyNow(bytes32)": {
        "notice": "**  Users who want to buy an NFT from the marketplace whether it's fixed price or auction with `sellForEnabled = true` can call this function. - User MUST approve contract to transfer the STFI token , MUST NOT be less than the price. - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`]**if auction, the seller must enabe forSale. prices should be more than or equal the listing price"
      },
      "changeFees(uint256,uint256)": {
        "notice": "only called by `owner` to change the name and `whenPaused`"
      },
      "changeListInsuranceAmount(uint256,uint256)": {
        "notice": "only called by `owner` to change the name and `whenPaused`"
      },
      "deList(bytes32)": {
        "notice": "** Users who no longer want to keep their NFT in our marketplace can easly call this function to get their NFT back. Unsuccessful auction creators need to call it as well to get their nft back with no cost as well as the item added via [`listOnMarketplace`] or [`listOnMarketplaceWithPermit`]   - Only buyers can delist their own items  - Auction items can't delisted until the auction ended**auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine"
      },
      "disputeAuction(bytes32)": {
        "notice": "**  If the winning bidder didn't pay within the time range stated in te contract `fulfillDuration`, Auction creator calls this function to get the nft back and punish the malicious bidder by taking the insurance (50% goes to the auction staking balance, 50% goes to the platform) - Current time  MUST be more than or equal the `disputeTime` for this auction      - Only auction Creator can dispute. - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, and the auction is approved , auction creator can dispute, if it's not approved yet, auction creator can not. - [`buyNow`]: Users who want to buy an NFT from the marketplace whether it's fixed price or auction with `sellForEnabled = true` can call this function. - User MUST approve contract to transfer the STFI token , MUST NOT be less than the price. - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`]**after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner"
      },
      "fulfillBid(bytes32)": {
        "notice": "**  After the end of the Auction, the winner bidder , the last bidder call this function within a certain duration to pay and get the NFT - user MUST approve contract to transfer the STFI tokens , MUST NOT be less than the bid price      - Winner bidder can call it within the `fulfillDuration` right after the end of the auction. - Winner bider can call it even after the its end as long as the auction reactor has not called dispute. the winner bidder can have chat with the seller  and if the auction creator thinks the winner bidder is not a malicious bidder,  they might agree to wait so we don't want to prevent the scenario where the can see eye to eye. At the end the auction creator wants to buy the NFT and get the price - If the bid price exceed the cap, STartfi is regulated entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the transaction can't be proceed unless this deal is approved by Startfi by calling [`approveDeal`] ** emit : FulfillBid"
      },
      "fulfillBidWithPermit(bytes32,uint256,uint8,bytes32,bytes32)": {
        "notice": "**After the end of the Auction, the winner bidder , the last bidder call this function within a certain duration to pay and get the NFT, they call this function without sending prior transaction to `approve` the marketplace to transfer STFI. This function call`permit` [`eip-2612`] then call [`fulfillBid`] internally.** "
      },
      "migrateEmergency(bytes32)": {
        "notice": "** Only when contract is paused, users can safely delist their token with no cost. Startfi team might have to pause the contract to make any update on the protocol terms or in emergency if high risk vulnerability is discovered to protect the users.     - Only buyers can delist their own items **called only when puased , let user to migrate for release if they don't agree on our new terms"
      },
      "releaseListingReserves(bytes32,address)": {
        "notice": "** users need to stake STFI to bid in the marketplace , these tokens needs to set release if the auction is no longer active and user can use these stakes to bid  thus, function to release tokens reserved to listing of market   in order to let user batch release many lisiting , they can call `releaseBatchReserves` called by user/ third actors only when s/he wants rather than force the check & updates with every transaction which might be very costly . -  ** called by user or on behalf of the user only when s/he wants rather than force the check & updates with every transaction which might be very costly ."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 325,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4004_storage)"
      },
      {
        "astId": 705,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 7387,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_adminWallet",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7389,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "fulfillDuration",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7391,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "unpauseTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4716,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_marketPlaceName",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 7686,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_paymentToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7688,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_feeFraction",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7690,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_feeBase",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7692,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "stakeContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7694,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listqualifyPercentage",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7696,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listqualifyPercentageBase",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7700,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "userReserves",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7571,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_usdCap",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7573,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_stfiCap",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 7575,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_stfiUsdt",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7579,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "kycedDeals",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7928,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "offerTerms",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(conditions)7933_storage)"
      },
      {
        "astId": 4902,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listings",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 4944,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_tokenListings",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_struct(Listing)4931_storage)"
      },
      {
        "astId": 4779,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listingBids",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Bid)4767_storage))"
      },
      {
        "astId": 4784,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidToListing",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_bytes32,t_struct(WinningBid)4772_storage)"
      },
      {
        "astId": 5074,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listingCounter",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ListingStatus)4939": {
        "encoding": "inplace",
        "label": "enum MarketPlaceListing.ListingStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ListingType)4935": {
        "encoding": "inplace",
        "label": "enum MarketPlaceListing.ListingType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Bid)4767_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MarketPlaceBid.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)4767_storage"
      },
      "t_mapping(t_address,t_struct(conditions)7933_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StartFiMarketPlaceSpecialOffer.conditions)",
        "numberOfBytes": "32",
        "value": "t_struct(conditions)7933_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Bid)4767_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct MarketPlaceBid.Bid))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Bid)4767_storage)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4004_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4004_storage"
      },
      "t_mapping(t_bytes32,t_struct(Listing)4931_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlaceListing.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)4931_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_struct(WinningBid)4772_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlaceBid.WinningBid)",
        "numberOfBytes": "32",
        "value": "t_struct(WinningBid)4772_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4004_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4003,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3703_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bid)4767_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceBid.Bid",
        "members": [
          {
            "astId": 4760,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4762,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4764,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "isPurchased",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4766,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "isStakeReserved",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Listing)4931_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceListing.Listing",
        "members": [
          {
            "astId": 4908,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4910,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4912,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "buyer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4914,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4916,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "listingPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4918,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "releaseTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4920,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "disputeTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4922,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "insuranceAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4924,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "minimumBid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4927,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "listingType",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(ListingType)4935"
          },
          {
            "astId": 4930,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "status",
            "offset": 1,
            "slot": "9",
            "type": "t_enum(ListingStatus)4939"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3703_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3698,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3702,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WinningBid)4772_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceBid.WinningBid",
        "members": [
          {
            "astId": 4769,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4771,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(conditions)7933_storage": {
        "encoding": "inplace",
        "label": "struct StartFiMarketPlaceSpecialOffer.conditions",
        "members": [
          {
            "astId": 7930,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "fee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7932,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "feeBase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}