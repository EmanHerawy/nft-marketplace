{
  "address": "0x0fC5025C764cE34df352757e82f7B5c4Df39A836",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stfiToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "finePayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketplace",
          "type": "address"
        }
      ],
      "name": "setMarketplace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbe9c0dc01cbf4f630a0b368de4ed926c692ec56588fa7b60062e8b9927744e6",
  "receipt": {
    "to": null,
    "from": "0x5B38Da6a701c568545dCfcB03FcB875f56beddC4",
    "contractAddress": "0x0fC5025C764cE34df352757e82f7B5c4Df39A836",
    "transactionIndex": 0,
    "gasUsed": "608948",
    "logsBloom": "0x
    "blockHash": "0x076931efdd340cb8a9f6fd27a7fb718d47fddb0d51959533ed7553f41ab0d484",
    "transactionHash": "0xdbe9c0dc01cbf4f630a0b368de4ed926c692ec56588fa7b60062e8b9927744e6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22891556,
        "transactionHash": "0xdbe9c0dc01cbf4f630a0b368de4ed926c692ec56588fa7b60062e8b9927744e6",
        "address": "0x0fC5025C764cE34df352757e82f7B5c4Df39A836",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x076931efdd340cb8a9f6fd27a7fb718d47fddb0d51959533ed7553f41ab0d484"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22891556,
        "transactionHash": "0xdbe9c0dc01cbf4f630a0b368de4ed926c692ec56588fa7b60062e8b9927744e6",
        "address": "0x0fC5025C764cE34df352757e82f7B5c4Df39A836",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x076931efdd340cb8a9f6fd27a7fb718d47fddb0d51959533ed7553f41ab0d484"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22891556,
        "transactionHash": "0xdbe9c0dc01cbf4f630a0b368de4ed926c692ec56588fa7b60062e8b9927744e6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001039c3292f2b5140000000000000000000000000000000000000000000000000efc331a9986f00000000000000000000000000000000000000000000000037e93387767048ed7190000000000000000000000000000000000000000000000000df896e806943aec00000000000000000000000000000000000000000000037e943c139997818c2d",
        "logIndex": 2,
        "blockHash": "0x076931efdd340cb8a9f6fd27a7fb718d47fddb0d51959533ed7553f41ab0d484"
      }
    ],
    "blockNumber": 22891556,
    "cumulativeGasUsed": "608948",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd2a5bC10698FD955D1Fe6cb468a17809A08fd005",
    "0x5B38Da6a701c568545dCfcB03FcB875f56beddC4"
  ],
  "solcInputHash": "b4ee5648d0e9d9b46f5b1ab4eac42396",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stfiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"finePayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"StartFi Stakes [ desc ] : contract to hold users stakes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartFiStakes.sol\":\"StartFiStakes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/StartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport './interface/IStartFiStakes.sol';\\nimport './interface/IStartFiMarketPlace.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n \\n *@title  StartFi Stakes\\n * [ desc ] : contract to hold users stakes\\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\\n */\\n\\ncontract StartFiStakes is Ownable, IStartFiStakes {\\n    /******************************************* decalrations go here ********************************************************* */\\n    mapping(address => uint256) stakerReserved;\\n    address marketplace;\\n    address stfiToken;\\n    /******************************************* modifiers go here ********************************************************* */\\n    modifier onlyMarketplace() {\\n        require(_msgSender() == marketplace, 'Caller is not the marketplace');\\n        _;\\n    }\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(address _stfiToken, address _owner) {\\n        stfiToken = _stfiToken;\\n        transferOwnership(_owner);\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    // deposit\\n    function deposit(address user, uint256 amount) external {\\n        require(_getAllowance(_msgSender()) >= amount, 'Invalid amount');\\n        _safeTokenTransferFrom(_msgSender(), address(this), amount);\\n        stakerReserved[user] = stakerReserved[user] + amount;\\n    }\\n\\n    function setMarketplace(address _marketplace) external onlyOwner {\\n        marketplace = _marketplace;\\n    }\\n\\n    function _safeTokenTransfer(address to, uint256 amount) private returns (bool) {\\n        return IERC20(stfiToken).transfer(to, amount);\\n    }\\n\\n    function _safeTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool) {\\n        return IERC20(stfiToken).transferFrom(from, to, amount);\\n    }\\n\\n    // withdraw\\n    function withdraw(uint256 amount) external {\\n        // TODO:check marketplace user reserves\\n        uint256 reserves = IStartFiMarketPlace(marketplace).getUserReserved(_msgSender());\\n        uint256 allowance = stakerReserved[_msgSender()] - reserves;\\n        require(allowance >= amount, 'Invalid amount');\\n        _safeTokenTransfer(_msgSender(), amount);\\n        stakerReserved[_msgSender()] = stakerReserved[_msgSender()] - amount;\\n    }\\n\\n    // punish\\n    function deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount /*onlyMarketplace*/\\n    ) external override returns (bool) {\\n        require(stakerReserved[finePayer] >= amount, 'Invalid amount');\\n        stakerReserved[finePayer] = stakerReserved[finePayer] - amount;\\n        stakerReserved[to] = stakerReserved[to] + amount;\\n        return true;\\n    }\\n\\n    //getpoolinfo\\n    function getReserves(address owner) external view override returns (uint256) {\\n        return stakerReserved[owner];\\n    }\\n\\n    function _getAllowance(address owner) private view returns (uint256) {\\n        return IERC20(stfiToken).allowance(owner, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x69c2cc0ea75626d9bbb79650bed632720b7185c56257a03157443cbfdb8d51fe\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IStartFiMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\n/**\\n *desc   contract to manage the deal cap to keep all our transaction regulated\\n *  Startfi is MarketPlaceBid entity in Estonia and regulation compliance is forced in our smart contract, KYC is need first and the purchase transaction can't be proceed unless this deal is approved by Startfi by calling [approveDeal]\\n * @title StartFi Marketplace Cap\\n */\\ninterface IStartFiMarketPlace {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    /******************************************* read functions go here ********************************************************* */\\n\\n    function isApprovedDeal(bytes32 listingId) external view returns (bool status);\\n\\n    function getUserReserved(address user) external view returns (uint256);\\n\\n    function usdCap() external view returns (uint256);\\n\\n    function stfiCap() external view returns (uint256);\\n\\n    function stfiUsdt() external view returns (uint256);\\n\\n    function getFees(address seller) external view returns (uint256 fee, uint256 feeBase);\\n\\n    /******************************************* state functions go here ********************************************************* */\\n\\n    // /**\\n    //  *  @dev only called by `owner` to update the cap\\n    //  * @param _usdCap  the new fees value to be stored\\n    //  */\\n    // function setUsdCap(uint256 _usdCap) external;\\n\\n    // /**\\n    //  *  @dev only called by  `priceFeeds` to update the STFI/usdt price\\n    //  * @param _stfiPrice  the new stfi price per usdt\\n    //  */\\n    // function setPrice(uint256 _stfiPrice) external;\\n}\\n\",\"keccak256\":\"0x51a5e19bf39b0ecef1ae110e79bbe004f120dba03b6119caaa12bceb2edf078e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IStartFiStakes {\\n    function getReserves(address owner) external view returns (uint256);\\n\\n    function deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e26b491e76af5e21d21a98750b118c422565b7bd2db1f8a9c0174dc99f83e93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610aea380380610aea83398101604081905261002f9161019f565b61003833610063565b600380546001600160a01b0319166001600160a01b03841617905561005c816100b3565b50506101d1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146101125760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166101775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610109565b61018081610063565b50565b80516001600160a01b038116811461019a57600080fd5b919050565b600080604083850312156101b1578182fd5b6101ba83610183565b91506101c860208401610183565b90509250929050565b61090a806101e06000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806373ad6c2d1161005b57806373ad6c2d146100f95780638da5cb5b1461010c578063929c517914610127578063f2fde38b1461014a57600080fd5b80632e1a7d4d1461008d5780633e99c1e4146100a257806347e7ef24146100de578063715018a6146100f1575b600080fd5b6100a061009b36600461085f565b61015d565b005b6100cb6100b03660046107c1565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100a06100ec366004610816565b61028b565b6100a0610324565b6100a06101073660046107c1565b61038a565b6000546040516001600160a01b0390911681526020016100d5565b61013a6101353660046107db565b610406565b60405190151581526020016100d5565b6100a06101583660046107c1565b6104db565b6002546000906001600160a01b0316631f78fd0b336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e99190610877565b33600090815260016020526040812054919250906102089083906108a7565b9050828110156102505760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064015b60405180910390fd5b61025a33846105a6565b50336000908152600160205260409020546102769084906108a7565b33600090815260016020526040902055505050565b8061029533610634565b10156102d45760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610247565b6102df3330836106be565b506001600160a01b03821660009081526001602052604090205461030490829061088f565b6001600160a01b0390921660009081526001602052604090209190915550565b6000546001600160a01b0316331461037e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610247565b6103886000610755565b565b6000546001600160a01b031633146103e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610247565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831660009081526001602052604081205482111561045f5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610247565b6001600160a01b0384166000908152600160205260409020546104839083906108a7565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546104b390839061088f565b6001600160a01b03841660009081526001602081905260409091209190915590509392505050565b6000546001600160a01b031633146105355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610247565b6001600160a01b03811661059a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610247565b6105a381610755565b50565b60035460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d919061083f565b9392505050565b600354604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e9060440160206040518083038186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190610877565b92915050565b6003546040516323b872dd60e01b81526001600160a01b03858116600483015284811660248301526044820184905260009216906323b872dd90606401602060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d919061083f565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146107bc57600080fd5b919050565b6000602082840312156107d2578081fd5b61062d826107a5565b6000806000606084860312156107ef578182fd5b6107f8846107a5565b9250610806602085016107a5565b9150604084013590509250925092565b60008060408385031215610828578182fd5b610831836107a5565b946020939093013593505050565b600060208284031215610850578081fd5b8151801515811461062d578182fd5b600060208284031215610870578081fd5b5035919050565b600060208284031215610888578081fd5b5051919050565b600082198211156108a2576108a26108be565b500190565b6000828210156108b9576108b96108be565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122011f6a359848caf4a9f4df65ab40ab5553b2fa3f32f14ab911557954643e2d27364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806373ad6c2d1161005b57806373ad6c2d146100f95780638da5cb5b1461010c578063929c517914610127578063f2fde38b1461014a57600080fd5b80632e1a7d4d1461008d5780633e99c1e4146100a257806347e7ef24146100de578063715018a6146100f1575b600080fd5b6100a061009b36600461085f565b61015d565b005b6100cb6100b03660046107c1565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100a06100ec366004610816565b61028b565b6100a0610324565b6100a06101073660046107c1565b61038a565b6000546040516001600160a01b0390911681526020016100d5565b61013a6101353660046107db565b610406565b60405190151581526020016100d5565b6100a06101583660046107c1565b6104db565b6002546000906001600160a01b0316631f78fd0b336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e99190610877565b33600090815260016020526040812054919250906102089083906108a7565b9050828110156102505760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064015b60405180910390fd5b61025a33846105a6565b50336000908152600160205260409020546102769084906108a7565b33600090815260016020526040902055505050565b8061029533610634565b10156102d45760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610247565b6102df3330836106be565b506001600160a01b03821660009081526001602052604090205461030490829061088f565b6001600160a01b0390921660009081526001602052604090209190915550565b6000546001600160a01b0316331461037e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610247565b6103886000610755565b565b6000546001600160a01b031633146103e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610247565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831660009081526001602052604081205482111561045f5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610247565b6001600160a01b0384166000908152600160205260409020546104839083906108a7565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546104b390839061088f565b6001600160a01b03841660009081526001602081905260409091209190915590509392505050565b6000546001600160a01b031633146105355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610247565b6001600160a01b03811661059a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610247565b6105a381610755565b50565b60035460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d919061083f565b9392505050565b600354604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e9060440160206040518083038186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190610877565b92915050565b6003546040516323b872dd60e01b81526001600160a01b03858116600483015284811660248301526044820184905260009216906323b872dd90606401602060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d919061083f565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146107bc57600080fd5b919050565b6000602082840312156107d2578081fd5b61062d826107a5565b6000806000606084860312156107ef578182fd5b6107f8846107a5565b9250610806602085016107a5565b9150604084013590509250925092565b60008060408385031215610828578182fd5b610831836107a5565b946020939093013593505050565b600060208284031215610850578081fd5b8151801515811461062d578182fd5b600060208284031215610870578081fd5b5035919050565b600060208284031215610888578081fd5b5051919050565b600082198211156108a2576108a26108be565b500190565b6000828210156108b9576108b96108be565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122011f6a359848caf4a9f4df65ab40ab5553b2fa3f32f14ab911557954643e2d27364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "StartFi Stakes [ desc ] : contract to hold users stakes",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": ": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 591,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8602,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "stakerReserved",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8604,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "marketplace",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8606,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "stfiToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}