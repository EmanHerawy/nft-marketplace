{
  "address": "0x48e3657844AAa507557f82fF1Da325a6241FEccf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stfiToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "finePayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketplace",
          "type": "address"
        }
      ],
      "name": "setMarketplace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6559c3df1bf8a3e97d5b9a6196f2365fea0c20e63d1d55450d4e60b1b145e3f6",
  "receipt": {
    "to": null,
    "from": "0xa1D2aC2b075194770D60d5ac4c7a30015010E1A0",
    "contractAddress": "0x48e3657844AAa507557f82fF1Da325a6241FEccf",
    "transactionIndex": 0,
    "gasUsed": "572350",
    "logsBloom": "0x
    "blockHash": "0xfe3e6648fc93e87108fa702451f3501cfef635ec78a3b5c1ccab4591e12794fd",
    "transactionHash": "0x6559c3df1bf8a3e97d5b9a6196f2365fea0c20e63d1d55450d4e60b1b145e3f6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9495523,
        "transactionHash": "0x6559c3df1bf8a3e97d5b9a6196f2365fea0c20e63d1d55450d4e60b1b145e3f6",
        "address": "0x48e3657844AAa507557f82fF1Da325a6241FEccf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a1d2ac2b075194770d60d5ac4c7a30015010e1a0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfe3e6648fc93e87108fa702451f3501cfef635ec78a3b5c1ccab4591e12794fd"
      }
    ],
    "blockNumber": 9495523,
    "cumulativeGasUsed": "572350",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x469ed37Eb60Eedf3D91cF303240b9D6c735a2562"
  ],
  "solcInputHash": "0cde34bb0e3656ab12e54591121c8799",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stfiToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"finePayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eman Herawy, StartFi Team\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"StartFi Stakes [ desc ] : contract to hold users stakes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartFiStakes.sol\":\"StartFiStakes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/StartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\n\\nimport './interface/IStartFiStakes.sol';\\nimport './interface/IStartFiMarketplace.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  StartFi Stakes\\n * [ desc ] : contract to hold users stakes\\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\\n */\\n\\ncontract StartFiStakes is Ownable, IStartFiStakes {\\n    /******************************************* decalrations go here ********************************************************* */\\n    mapping(address => uint256) stakerReserved;\\n    address marketplace;\\n    address stfiToken;\\n    /******************************************* modifiers go here ********************************************************* */\\n    modifier onlyMarketplace() {\\n        require(_msgSender() == marketplace, 'Caller is not the marketplace');\\n        _;\\n    }\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(address _stfiToken) {\\n        stfiToken = _stfiToken;\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    // deposit\\n    function deposit(address user, uint256 amount) external {\\n        require(_getAllowance(_msgSender()) >= amount, 'Invalid amount');\\n        _safeTokenTransferFrom(_msgSender(), address(this), amount);\\n        stakerReserved[user] = stakerReserved[user] + amount;\\n    }\\n\\n    function setMarketplace(address _marketplace) external onlyOwner {\\n        marketplace = _marketplace;\\n    }\\n\\n    function _safeTokenTransfer(address to, uint256 amount) private returns (bool) {\\n        return IERC20(stfiToken).transfer(to, amount);\\n    }\\n\\n    function _safeTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool) {\\n        return IERC20(stfiToken).transferFrom(from, to, amount);\\n    }\\n\\n    // withdraw\\n    function withdraw(uint256 amount) external {\\n        // TODO:check marketplace user reserves\\n        uint256 reserves = IStartFiMarketplace(marketplace).getUserReserved(_msgSender());\\n        uint256 allowance = stakerReserved[_msgSender()] - reserves;\\n        require(allowance >= amount, 'Invalid amount');\\n        _safeTokenTransfer(_msgSender(), amount);\\n        stakerReserved[_msgSender()] = stakerReserved[_msgSender()] - amount;\\n    }\\n\\n    // punish\\n    function deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount /*onlyMarketplace*/\\n    ) external override returns (bool) {\\n        require(stakerReserved[finePayer] >= amount, 'Invalid amount');\\n        stakerReserved[finePayer] = stakerReserved[finePayer] - amount;\\n        stakerReserved[to] = stakerReserved[to] + amount;\\n        return true;\\n    }\\n\\n    //getpoolinfo\\n    function getReserves(address owner) external view override returns (uint256) {\\n        return stakerReserved[owner];\\n    }\\n\\n    function _getAllowance(address owner) private view returns (uint256) {\\n        return IERC20(stfiToken).allowance(owner, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xea7a7049eb2d82fee21a7e38126a9f48a42b44500c09731f448fb7742ae83f41\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IStartFiMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IStartFiMarketplace {\\n    function getUserReserved(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdae90b5cb61a7dc0e4885142e690cb6250e8ad1dfcd83ef4bdf84660da532de9\",\"license\":\"MIT\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IStartFiStakes {\\n    function getReserves(address owner) external view returns (uint256);\\n\\n    function deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa1df0b81fe5235f7005c80728b3a2dbfd2e2257494058f8b00d37326954176ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161096b38038061096b83398101604081905261002f916100ad565b6100383361005d565b600380546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b61087f806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806373ad6c2d1161005b57806373ad6c2d146100f95780638da5cb5b1461010c578063929c517914610127578063f2fde38b1461014a57600080fd5b80632e1a7d4d1461008d5780633e99c1e4146100a257806347e7ef24146100de578063715018a6146100f1575b600080fd5b6100a061009b366004610775565b61015d565b005b6100cb6100b03660046106d2565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100a06100ec366004610729565b61026e565b6100a06102e6565b6100a06101073660046106d2565b61031c565b6000546040516001600160a01b0390911681526020016100d5565b61013a6101353660046106ed565b610368565b60405190151581526020016100d5565b6100a06101583660046106d2565b61041c565b6002546000906001600160a01b0316631f78fd0b336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e9919061078e565b336000908152600160205260408120549192509061020890839061081c565b9050828110156102335760405162461bcd60e51b815260040161022a906107a7565b60405180910390fd5b61023d33846104b7565b503360009081526001602052604090205461025990849061081c565b33600090815260016020526040902055505050565b8061027833610545565b10156102965760405162461bcd60e51b815260040161022a906107a7565b6102a13330836105cf565b506001600160a01b0382166000908152600160205260409020546102c6908290610804565b6001600160a01b0390921660009081526001602052604090209190915550565b6000546001600160a01b031633146103105760405162461bcd60e51b815260040161022a906107cf565b61031a6000610666565b565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161022a906107cf565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166000908152600160205260408120548211156103a05760405162461bcd60e51b815260040161022a906107a7565b6001600160a01b0384166000908152600160205260409020546103c490839061081c565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546103f4908390610804565b6001600160a01b03841660009081526001602081905260409091209190915590509392505050565b6000546001600160a01b031633146104465760405162461bcd60e51b815260040161022a906107cf565b6001600160a01b0381166104ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022a565b6104b481610666565b50565b60035460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b15801561050657600080fd5b505af115801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610753565b9392505050565b600354604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e9060440160206040518083038186803b15801561059157600080fd5b505afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c9919061078e565b92915050565b6003546040516323b872dd60e01b81526001600160a01b03858116600483015284811660248301526044820184905260009216906323b872dd90606401602060405180830381600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190610753565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146106cd57600080fd5b919050565b6000602082840312156106e457600080fd5b61053e826106b6565b60008060006060848603121561070257600080fd5b61070b846106b6565b9250610719602085016106b6565b9150604084013590509250925092565b6000806040838503121561073c57600080fd5b610745836106b6565b946020939093013593505050565b60006020828403121561076557600080fd5b8151801515811461053e57600080fd5b60006020828403121561078757600080fd5b5035919050565b6000602082840312156107a057600080fd5b5051919050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561081757610817610833565b500190565b60008282101561082e5761082e610833565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122036dd6b3b7ca4f6bb914c0e8e4a88279807e4f6860f5f5f84ea82fdb71128624464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806373ad6c2d1161005b57806373ad6c2d146100f95780638da5cb5b1461010c578063929c517914610127578063f2fde38b1461014a57600080fd5b80632e1a7d4d1461008d5780633e99c1e4146100a257806347e7ef24146100de578063715018a6146100f1575b600080fd5b6100a061009b366004610775565b61015d565b005b6100cb6100b03660046106d2565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100a06100ec366004610729565b61026e565b6100a06102e6565b6100a06101073660046106d2565b61031c565b6000546040516001600160a01b0390911681526020016100d5565b61013a6101353660046106ed565b610368565b60405190151581526020016100d5565b6100a06101583660046106d2565b61041c565b6002546000906001600160a01b0316631f78fd0b336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e9919061078e565b336000908152600160205260408120549192509061020890839061081c565b9050828110156102335760405162461bcd60e51b815260040161022a906107a7565b60405180910390fd5b61023d33846104b7565b503360009081526001602052604090205461025990849061081c565b33600090815260016020526040902055505050565b8061027833610545565b10156102965760405162461bcd60e51b815260040161022a906107a7565b6102a13330836105cf565b506001600160a01b0382166000908152600160205260409020546102c6908290610804565b6001600160a01b0390921660009081526001602052604090209190915550565b6000546001600160a01b031633146103105760405162461bcd60e51b815260040161022a906107cf565b61031a6000610666565b565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161022a906107cf565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166000908152600160205260408120548211156103a05760405162461bcd60e51b815260040161022a906107a7565b6001600160a01b0384166000908152600160205260409020546103c490839061081c565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546103f4908390610804565b6001600160a01b03841660009081526001602081905260409091209190915590509392505050565b6000546001600160a01b031633146104465760405162461bcd60e51b815260040161022a906107cf565b6001600160a01b0381166104ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022a565b6104b481610666565b50565b60035460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b15801561050657600080fd5b505af115801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610753565b9392505050565b600354604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e9060440160206040518083038186803b15801561059157600080fd5b505afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c9919061078e565b92915050565b6003546040516323b872dd60e01b81526001600160a01b03858116600483015284811660248301526044820184905260009216906323b872dd90606401602060405180830381600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190610753565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146106cd57600080fd5b919050565b6000602082840312156106e457600080fd5b61053e826106b6565b60008060006060848603121561070257600080fd5b61070b846106b6565b9250610719602085016106b6565b9150604084013590509250925092565b6000806040838503121561073c57600080fd5b610745836106b6565b946020939093013593505050565b60006020828403121561076557600080fd5b8151801515811461053e57600080fd5b60006020828403121561078757600080fd5b5035919050565b6000602082840312156107a057600080fd5b5051919050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561081757610817610833565b500190565b60008282101561082e5761082e610833565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122036dd6b3b7ca4f6bb914c0e8e4a88279807e4f6860f5f5f84ea82fdb71128624464736f6c63430008070033",
  "devdoc": {
    "author": "Eman Herawy, StartFi Team",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "StartFi Stakes [ desc ] : contract to hold users stakes",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": ": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 591,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9473,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "stakerReserved",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9475,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "marketplace",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9477,
        "contract": "contracts/StartFiStakes.sol:StartFiStakes",
        "label": "stfiToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}