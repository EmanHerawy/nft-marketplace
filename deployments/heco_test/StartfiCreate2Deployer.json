{
  "address": "0x432ea282DfBc854352149b8D3cFd246E6A36fb81",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "codeHash",
          "type": "bytes32"
        }
      ],
      "name": "computeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "code",
          "type": "bytes"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x73c34b3450671887d45ce5c65e6ddc64d9098f1078b77e1e775445dfa905f5c1",
  "receipt": {
    "to": null,
    "from": "0x7e33ca6d5fe6a06ae484E81262ACB74919Dc25fb",
    "contractAddress": "0x432ea282DfBc854352149b8D3cFd246E6A36fb81",
    "transactionIndex": 0,
    "gasUsed": "249698",
    "logsBloom": "0x
    "blockHash": "0x999338ca1a048dd16cb5fe42db868a8446a226e52f7bf057c7737506157c6848",
    "transactionHash": "0x73c34b3450671887d45ce5c65e6ddc64d9098f1078b77e1e775445dfa905f5c1",
    "logs": [],
    "blockNumber": 10022287,
    "cumulativeGasUsed": "249698",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "575d10d38b8d17fe3754b681f2162ab6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"code\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deployed(address,uint256,bytes32)\":{\"details\":\"Deploys a contract using `CREATE2`. The address where the contract will be deployed can be known in advance via {computeAddress}. The bytecode for a contract can be obtained from Solidity with `type(contractName).creationCode`. Requirements: - `bytecode` must not be empty. - `salt` must have not been used for `bytecode` already. - the factory must have a balance of at least `value`. - if `value` is non-zero, `bytecode` must have a `payable` constructor.\"}},\"kind\":\"dev\",\"methods\":{\"computeAddress(bytes32,bytes32)\":{\"details\":\"Returns the address where a contract will be stored if deployed via {deploy}. Any change in the `bytecodeHash` or `salt` will result in a new destination address.\"}},\"title\":\"CREATE2 Deployer Smart Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartfiCreate2Deployer.sol\":\"StartfiCreate2Deployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"contracts/StartfiCreate2Deployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Create2.sol';\\n\\n/**\\n * @title CREATE2 Deployer Smart Contract\\n */\\n\\ncontract StartfiCreate2Deployer {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the\\n     * contract will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `value`.\\n     * - if `value` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    event Deployed(address addr, uint256 value, bytes32 salt);\\n\\n    function deploy(\\n        uint256 value,\\n        bytes32 salt,\\n        bytes memory code\\n    ) external returns (address newAddress) {\\n        newAddress = Create2.deploy(value, salt, code);\\n        emit Deployed(newAddress, value, salt);\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}.\\n     * Any change in the `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 codeHash) public view returns (address) {\\n        return Create2.computeAddress(salt, codeHash);\\n    }\\n\\n   \\n}\\n\",\"keccak256\":\"0x1231f5fc22816d415d11834209f853bfe8f921875df5ca7a3ec5ab6e0056fb5a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061038e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063481286e61461003b57806366cfa0571461006a575b600080fd5b61004e61004936600461025c565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461027e565b610090565b600061008983836100f1565b9392505050565b600061009d84848461014d565b604080516001600160a01b0383168152602081018790529081018590529091507f74b412106d13cbc6ab8d1233d1a7cbb6d6e5f73714818298134e1333995300099060600160405180910390a19392505050565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b1660218301526035820185905260558083018590528351808403909101815260759092019092528051910120600090610089565b600080844710156101a55760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b82516101f35760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015260640161019c565b8383516020850187f590506001600160a01b0381166102545760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015260640161019c565b949350505050565b6000806040838503121561026f57600080fd5b50508035926020909101359150565b60008060006060848603121561029357600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156102b957600080fd5b818601915086601f8301126102cd57600080fd5b8135818111156102df576102df610342565b604051601f8201601f19908116603f0116810190838211818310171561030757610307610342565b8160405282815289602084870101111561032057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dd845b7a5a5dba041dea9f5a0583704a17f8b082cce43a5fbb6eeed89f18277464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063481286e61461003b57806366cfa0571461006a575b600080fd5b61004e61004936600461025c565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461027e565b610090565b600061008983836100f1565b9392505050565b600061009d84848461014d565b604080516001600160a01b0383168152602081018790529081018590529091507f74b412106d13cbc6ab8d1233d1a7cbb6d6e5f73714818298134e1333995300099060600160405180910390a19392505050565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b1660218301526035820185905260558083018590528351808403909101815260759092019092528051910120600090610089565b600080844710156101a55760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b82516101f35760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015260640161019c565b8383516020850187f590506001600160a01b0381166102545760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015260640161019c565b949350505050565b6000806040838503121561026f57600080fd5b50508035926020909101359150565b60008060006060848603121561029357600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156102b957600080fd5b818601915086601f8301126102cd57600080fd5b8135818111156102df576102df610342565b604051601f8201601f19908116603f0116810190838211818310171561030757610307610342565b8160405282815289602084870101111561032057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dd845b7a5a5dba041dea9f5a0583704a17f8b082cce43a5fbb6eeed89f18277464736f6c63430008070033",
  "devdoc": {
    "events": {
      "Deployed(address,uint256,bytes32)": {
        "details": "Deploys a contract using `CREATE2`. The address where the contract will be deployed can be known in advance via {computeAddress}. The bytecode for a contract can be obtained from Solidity with `type(contractName).creationCode`. Requirements: - `bytecode` must not be empty. - `salt` must have not been used for `bytecode` already. - the factory must have a balance of at least `value`. - if `value` is non-zero, `bytecode` must have a `payable` constructor."
      }
    },
    "kind": "dev",
    "methods": {
      "computeAddress(bytes32,bytes32)": {
        "details": "Returns the address where a contract will be stored if deployed via {deploy}. Any change in the `bytecodeHash` or `salt` will result in a new destination address."
      }
    },
    "title": "CREATE2 Deployer Smart Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}